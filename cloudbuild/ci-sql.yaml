# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  
  - id: 'Overriding Backend Config'
    name: 'hashicorp/terraform:1.4.5'
    entrypoint: sh
    args:
      - -c
      - |
        cd infrastructure/terraform
        echo "terraform {" > backend_override.tf
        echo "  backend \"local\" {" >> backend_override.tf
        echo "    path = \"./.local-state\"" >> backend_override.tf
        echo "  }" >> backend_override.tf
        echo "}" >> backend_override.tf
        cd -
    env:
      - "TF_VAR_project=${PROJECT_ID}"

  - id: 'Initializing-Terraform'
    name: 'hashicorp/terraform:1.4.5'
    entrypoint: sh 
    args:
      - -c
      - |
        cp infrastructure/terraform/terraform-sample.tfvars infrastructure/terraform/terraform.tfvars
        terraform -chdir=infrastructure/terraform init
    env:
      - "TF_VAR_project=${PROJECT_ID}"

  - id: 'Creating-Config-YAML-file'
    name: 'hashicorp/terraform:1.4.5'
    entrypoint: sh 
    args:
      - -c
      - |
        terraform -chdir=infrastructure/terraform apply -auto-approve \
        -target=local_file.feature_store_configuration \
        -var=tf_state_project_id=${PROJECT_ID} \
        -var=data_project_id=${PROJECT_ID} \
        -var=create_dev_environment=false \
        -var=create_staging_environment=false \
        -var=create_prod_environment=false \
        -var=deploy_feature_store=false \
        -var=deploy_activation=false \
        -var=deploy_pipelines=false \
        -var=feature_store_config_env=dev
    env:
      - "TF_VAR_project=${PROJECT_ID}"

  - id: 'Apply-config-to-SQL-templates'
    name: '${_GCR_HOSTNAME}/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/ma-builder:latest'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        poetry run inv apply-env-variables-tables --env-name=${_DEPLOY_ENV}
        poetry run inv apply-env-variables-queries --env-name=${_DEPLOY_ENV}
        poetry run inv apply-env-variables-datasets --env-name=${_DEPLOY_ENV}
        poetry run inv apply-env-variables-procedures --env-name=${_DEPLOY_ENV} 
  
  - id: 'Check-SQL-files'
    name: '${_GCR_HOSTNAME}/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/ma-zetasql:latest'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        zetasql-formatter /workspace/sql/table /workspace/sql/query /workspace/sql/procedure /workspace/sql/schema/dataset &>> out.log
        (($? != 0)) && { printf '%s\n' "There are errors on the exited with non-zero"; cat out.log | grep -i 'ERROR' -B 1 -A 1; exit 0; }


options:
  dynamic_substitutions: true
  substitution_option: "ALLOW_LOOSE"

substitutions:
  _GCR_HOSTNAME: us-central1-docker.pkg.dev
  _DEPLOY_REGION: us-central1
  _ARTIFACT_REGISTRY_REPO: marketing-data-engine-base-repo