-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

## Setting procedure to lookback from the day before `input_date` until the day before `end_date`
SET input_date = DATE_SUB(input_date, INTERVAL 1 DAY);
SET end_date = DATE_SUB(end_date, INTERVAL 1 DAY);

# Run these once each day.
## Active users, Average daily purchasers, Average engagement time, Average engagement time per session, DAU / MAU, DAU / WAU, First time purchasers, First-time purchaser conversion, First-time purchasers per new user, Max daily purchasers, Min daily purchasers, New users, Returning users, Total purchasers, Total users, User conversion rate, User engagement, WAU / MAU 
CREATE TEMP TABLE engagement as (
SELECT 
    user_pseudo_id,
  ga_session_id as session_id, 
  MAX(engagement_time_msec) as engagement_time_msec,
  IFNULL(SUM(ecommerce.purchase_revenue_in_usd),0.0) as purchase_revenue_in_usd,
  LOGICAL_OR(CASE WHEN (event_name='purchase' AND ecommerce.transaction_id IS NULL) THEN TRUE ELSE FALSE END) as has_invalid_transactions,
  LOGICAL_OR(CASE WHEN (event_name='purchase' AND ga_session_id IS NOT NULL AND ecommerce.transaction_id IS NOT NULL AND ecommerce.transaction_id <> '(not set)') THEN TRUE ELSE FALSE END) as converted_in_session,
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
ON E.device_type_id = D.device_type_id
WHERE E.ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
  AND E.event_date BETWEEN end_date AND input_date
GROUP BY user_pseudo_id, session_id
);

CREATE TEMP TABLE revenue as (
SELECT 
  SUM(ecommerce.purchase_revenue_in_usd) as sum_revenue_per_day 
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
ON E.device_type_id = D.device_type_id 
WHERE E.ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
  AND event_date BETWEEN end_date AND input_date
GROUP BY event_date
);

CREATE TEMP TABLE users as (
SELECT 
  COUNT(DISTINCT CASE WHEN engagement_time_msec > 0 THEN user_pseudo_id END) as active_users 
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
ON E.device_type_id = D.device_type_id 
WHERE D.device_os IS NOT NULL
  AND event_date BETWEEN end_date AND input_date
);

CREATE TEMP TABLE first_purchasers as (
  SELECT COUNT(user_pseudo_id) as first_time_purchasers
  FROM (
      SELECT 
          user_pseudo_id, event_date, RANK() OVER (PARTITION BY user_pseudo_id ORDER BY event_timestamp ASC) AS unique_purchase
      FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
      INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
      ON E.device_type_id = D.device_type_id
      WHERE event_name IN ('purchase','in_app_purchase')
      AND E.ga_session_id IS NOT NULL
      AND D.device_os IS NOT NULL
      AND E.event_date BETWEEN end_date AND input_date
      GROUP BY user_pseudo_id, event_date, event_timestamp)
  WHERE unique_purchase=1
);

CREATE TEMP TABLE new_users_ as (
  SELECT 
  COUNT(distinct case when event_name="first_visit" then user_pseudo_id end) as new_users 
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON E.device_type_id = D.device_type_id
  WHERE E.ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
  AND E.event_date BETWEEN end_date AND input_date
  );

CREATE TEMP TABLE all_user_scoped_metrics as (
  SELECT
    user_pseudo_id, 
    event_date, 
    event_name,
    ga_session_id as session_id,
    FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
    INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
    ON E.device_type_id = D.device_type_id
    WHERE ga_session_id IS NOT NULL
    AND D.device_os IS NOT NULL
    AND event_date BETWEEN end_date AND input_date
    GROUP BY user_pseudo_id, session_id, event_date, event_name
  );

CREATE TEMP TABLE DataForTargetTable AS
  SELECT
    CURRENT_TIMESTAMP() AS processed_timestamp,
    input_date AS feature_date,
    COALESCE(COUNT(DISTINCT CASE WHEN (event_name='purchase' AND NOT e.has_invalid_transactions) THEN e.user_pseudo_id END),0) AS lifetime_purchasers_users,
    COALESCE(SAFE_DIVIDE(COUNT(DISTINCT CASE WHEN (event_name='purchase' AND NOT e.has_invalid_transactions) THEN e.user_pseudo_id END),COUNT(DISTINCT event_date)),0.0) AS lifetime_average_daily_purchasers,
    COALESCE(MAX(active_users),0) AS lifetime_active_users,
    COALESCE(SAFE_DIVIDE(MAX(active_users),COUNT(DISTINCT event_date)),0.0) AS lifetime_DAU,
    COALESCE(SAFE_DIVIDE(MAX(active_users),DATE_DIFF(MAX(event_date), MIN(event_date), MONTH)),0.0) AS lifetime_MAU,
    COALESCE(SAFE_DIVIDE(MAX(active_users),DATE_DIFF(MAX(event_date), MIN(event_date), WEEK)),0.0) AS lifetime_WAU,
    COALESCE(SAFE_DIVIDE(SAFE_DIVIDE(MAX(active_users),COUNT(DISTINCT event_date)),SAFE_DIVIDE(MAX(active_users),DATE_DIFF(MAX(event_date), MIN(event_date), MONTH))),0.0) AS lifetime_dau_per_mau,
    COALESCE(SAFE_DIVIDE(SAFE_DIVIDE(MAX(active_users),COUNT(DISTINCT event_date)),SAFE_DIVIDE(MAX(active_users),DATE_DIFF(MAX(event_date), MIN(event_date), WEEK))),0.0) AS lifetime_dau_per_wau,
    COALESCE(SAFE_DIVIDE(SAFE_DIVIDE(MAX(active_users),DATE_DIFF(MAX(event_date), MIN(event_date), WEEK)),SAFE_DIVIDE(MAX(active_users),DATE_DIFF(MAX(event_date), MIN(event_date), MONTH))),0.0) AS lifetime_wau_per_mau,
    COALESCE(ROUND(SUM(engagement_time_msec)/1000),0) AS lifetime_users_engagement_duration_seconds,
    COALESCE(SAFE_DIVIDE(ROUND(SUM(engagement_time_msec)/1000),MAX(active_users)),0.0) AS lifetime_average_engagement_time,
    COALESCE(SAFE_DIVIDE((ROUND(SUM(engagement_time_msec)/1000)),COUNT(e.session_id)),0.0) AS lifetime_average_engagement_time_per_session,
    COALESCE(SAFE_DIVIDE(COUNT(DISTINCT e.session_id),COUNT(DISTINCT e.user_pseudo_id)),0.0) AS lifetime_average_sessions_per_user,
    COALESCE(SAFE_DIVIDE(SUM(purchase_revenue_in_usd),COUNT(DISTINCT CASE WHEN (event_name='purchase' AND NOT e.has_invalid_transactions) THEN e.user_pseudo_id END)),0.0) AS lifetime_ARPPU,
    COALESCE(SAFE_DIVIDE(SUM(purchase_revenue_in_usd),MAX(active_users)),0.0) AS lifetime_ARPU,
    COALESCE(SAFE_DIVIDE(SUM(purchase_revenue_in_usd),COUNT(DISTINCT event_date)),0.0) AS lifetime_average_daily_revenue,
    COALESCE(MAX(sum_revenue_per_day),0.0) AS lifetime_max_daily_revenue,
    COALESCE(MIN(sum_revenue_per_day),0.0) AS lifetime_min_daily_revenue,
    COALESCE(MAX(new_users),0) AS lifetime_new_users,
    COALESCE(COUNT(DISTINCT e.user_pseudo_id) - MAX(new_users),0) AS lifetime_returning_users,
    COALESCE(MAX(first_time_purchasers),0) AS lifetime_first_time_purchasers,
    COALESCE(SAFE_DIVIDE(MAX(first_time_purchasers),MAX(active_users)),0.0) AS lifetime_first_time_purchaser_conversion,
    COALESCE(SAFE_DIVIDE(MAX(first_time_purchasers),MAX(new_users)),0.0) AS lifetime_first_time_purchasers_per_new_user,
    COALESCE(SAFE_DIVIDE(COUNT(DISTINCT CASE WHEN e.converted_in_session = TRUE THEN e.user_pseudo_id END),COUNT(DISTINCT e.user_pseudo_id)),0.0) AS lifetime_avg_user_conversion_rate,
    COALESCE(SAFE_DIVIDE(COUNT(DISTINCT CASE WHEN e.converted_in_session = TRUE THEN e.session_id END),COUNT(DISTINCT e.session_id)),0.0) AS lifetime_avg_session_conversion_rate,
    FROM all_user_scoped_metrics as usm
    INNER JOIN engagement as e 
      ON e.session_id = usm.session_id AND e.user_pseudo_id = usm.user_pseudo_id
    CROSS JOIN revenue
    CROSS JOIN users
    CROSS JOIN first_purchasers
    CROSS JOIN new_users_;

--INSERT INTO `{{project_id}}.{{dataset}}.{{insert_table}}`
--  SELECT * FROM DataForTargetTable;

MERGE `{{project_id}}.{{dataset}}.{{insert_table}}` I
USING DataForTargetTable T
ON I.feature_date = T.feature_date
WHEN MATCHED THEN
  UPDATE SET 
    I.processed_timestamp = T.processed_timestamp,
    I.lifetime_purchasers_users = T.lifetime_purchasers_users,
    I.lifetime_average_daily_purchasers = T.lifetime_average_daily_purchasers,
    I.lifetime_active_users = T.lifetime_active_users,
    I.lifetime_DAU = T.lifetime_DAU,
    I.lifetime_MAU = T.lifetime_MAU,
    I.lifetime_WAU = T.lifetime_WAU,
    I.lifetime_dau_per_mau = T.lifetime_dau_per_mau,
    I.lifetime_dau_per_wau = T.lifetime_dau_per_wau,
    I.lifetime_wau_per_mau = T.lifetime_wau_per_mau,
    I.lifetime_users_engagement_duration_seconds = T.lifetime_users_engagement_duration_seconds,
    I.lifetime_average_engagement_time = T.lifetime_average_engagement_time,
    I.lifetime_average_engagement_time_per_session = T.lifetime_average_engagement_time_per_session,
    I.lifetime_average_sessions_per_user = T.lifetime_average_sessions_per_user,
    I.lifetime_ARPPU = T.lifetime_ARPPU,
    I.lifetime_ARPU = T.lifetime_ARPU,
    I.lifetime_average_daily_revenue = T.lifetime_average_daily_revenue,
    I.lifetime_max_daily_revenue = T.lifetime_max_daily_revenue,
    I.lifetime_min_daily_revenue = T.lifetime_min_daily_revenue,
    I.lifetime_new_users = T.lifetime_new_users,
    I.lifetime_returning_users = T.lifetime_returning_users,
    I.lifetime_first_time_purchasers = T.lifetime_first_time_purchasers,
    I.lifetime_first_time_purchaser_conversion = T.lifetime_first_time_purchaser_conversion,
    I.lifetime_first_time_purchasers_per_new_user = T.lifetime_first_time_purchasers_per_new_user,
    I.lifetime_avg_user_conversion_rate = T.lifetime_avg_user_conversion_rate,
    I.lifetime_avg_session_conversion_rate = T.lifetime_avg_session_conversion_rate
WHEN NOT MATCHED THEN
  INSERT 
    (processed_timestamp,
     feature_date,
     lifetime_purchasers_users,
     lifetime_average_daily_purchasers,
     lifetime_active_users,
     lifetime_DAU,
     lifetime_MAU,
     lifetime_WAU,
     lifetime_dau_per_mau,
     lifetime_dau_per_wau,
     lifetime_wau_per_mau,
     lifetime_users_engagement_duration_seconds,
     lifetime_average_engagement_time,
     lifetime_average_engagement_time_per_session,
     lifetime_average_sessions_per_user,
     lifetime_ARPPU,
     lifetime_ARPU,
     lifetime_average_daily_revenue,
     lifetime_max_daily_revenue,
     lifetime_min_daily_revenue,
     lifetime_new_users,
     lifetime_returning_users,
     lifetime_first_time_purchasers,
     lifetime_first_time_purchaser_conversion,
     lifetime_first_time_purchasers_per_new_user,
     lifetime_avg_user_conversion_rate,
     lifetime_avg_session_conversion_rate)
  VALUES
    (T.processed_timestamp,
     T.feature_date,
     T.lifetime_purchasers_users,
     T.lifetime_average_daily_purchasers,
     T.lifetime_active_users,
     T.lifetime_DAU,
     T.lifetime_MAU,
     T.lifetime_WAU,
     T.lifetime_dau_per_mau,
     T.lifetime_dau_per_wau,
     T.lifetime_wau_per_mau,
     T.lifetime_users_engagement_duration_seconds,
     T.lifetime_average_engagement_time,
     T.lifetime_average_engagement_time_per_session,
     T.lifetime_average_sessions_per_user,
     T.lifetime_ARPPU,
     T.lifetime_ARPU,
     T.lifetime_average_daily_revenue,
     T.lifetime_max_daily_revenue,
     T.lifetime_min_daily_revenue,
     T.lifetime_new_users,
     T.lifetime_returning_users,
     T.lifetime_first_time_purchasers,
     T.lifetime_first_time_purchaser_conversion,
     T.lifetime_first_time_purchasers_per_new_user,
     T.lifetime_avg_user_conversion_rate,
     T.lifetime_avg_session_conversion_rate)
;

SET rows_added = 1;

DROP TABLE engagement;
DROP TABLE revenue;
DROP TABLE users;
DROP TABLE first_purchasers;
DROP TABLE new_users_;
DROP TABLE all_user_scoped_metrics;
DROP TABLE DataForTargetTable;