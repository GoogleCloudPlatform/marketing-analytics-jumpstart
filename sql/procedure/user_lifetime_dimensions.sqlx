-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- This SQL code defines a series of temporary tables to calculate and store user engagement metrics based on
-- rolling window aggregations. These tables are then used to populate a target table with daily user engagement features.

-- Setting procedure to lookback from the day before `input_date` until the day before `end_date`
SET input_date = DATE_SUB(input_date, INTERVAL 1 DAY);
SET end_date = DATE_SUB(end_date, INTERVAL 1 DAY);

-- Creating a temporary table `user_dimensions_event_session_scoped` to store user-level dimensions within the specified date range
CREATE OR REPLACE TEMP TABLE user_dimensions_event_session_scoped as (
  SELECT DISTINCT
  -- Unique identifier for the user
  user_pseudo_id,
  -- Last recorded lifetime value revenue for the user within the specified date range
  LAST_VALUE(user_ltv_revenue) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS user_ltv_revenue,
  -- Last recorded traffic source medium for the user within the specified date range
  LAST_VALUE(T.traffic_source_medium) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS last_traffic_source_medium,
  -- Last recorded traffic source name for the user within the specified date range
  LAST_VALUE(T.traffic_source_name) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS last_traffic_source_name,
  -- Last recorded traffic source for the user within the specified date range
  LAST_VALUE(T.traffic_source) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS last_traffic_source_source,
  -- Whether the user is new or existing based on the time difference between the event and their first touch timestamp within the specified date range
  LAST_VALUE(CASE WHEN (TIMESTAMP_DIFF(event_timestamp, user_first_touch_timestamp, DAY) < 7) OR (user_first_touch_timestamp IS NULL) THEN 'new' ELSE 'existing' END) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS new_or_established_user,
  -- Last recorded subcontinent for the user within the specified date range
  LAST_VALUE(L.subcontinent) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as geo_sub_continent,
  -- Last recorded country for the user within the specified date range
  LAST_VALUE(L.country) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as geo_country,
  -- Last recorded region for the user within the specified date range
  LAST_VALUE(L.region) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as geo_region,
  -- Last recorded city for the user within the specified date range
  LAST_VALUE(L.city) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as geo_city,
  -- Last recorded metro area for the user within the specified date range
  LAST_VALUE(L.metro) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as geo_metro,
  -- First recorded traffic source medium for the user within the specified date range
  FIRST_VALUE(T.traffic_source_medium) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS first_traffic_source_medium,
  -- First recorded traffic source name for the user within the specified date range
  FIRST_VALUE(T.traffic_source_name) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS first_traffic_source_name,
  -- First recorded traffic source for the user within the specified date range
  FIRST_VALUE(T.traffic_source) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS first_traffic_source_source,
  -- Whether the user has signed in with a user ID within the specified date range
  MAX(CASE WHEN user_id IS NOT NULL THEN TRUE ELSE FALSE END) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS has_signed_in_with_user_id,
  -- Last recorded device category for the user within the specified date range
  LAST_VALUE(device_category) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_category,
  -- Last recorded mobile brand name for the user within the specified date range
  LAST_VALUE(device_mobile_brand_name) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_mobile_brand_name,
  -- Last recorded mobile model name for the user within the specified date range
  LAST_VALUE(device_mobile_model_name) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_mobile_model_name,
  -- Last recorded device operating system for the user within the specified date range
  LAST_VALUE(device_os) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_os,
  -- Last recorded device language for the user within the specified date range
  LAST_VALUE(language) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS device_language,
  -- Last recorded web browser for the user within the specified date range
  LAST_VALUE(device_web_browser) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_web_browser,
  -- Last recorded advertising ID for the user's device within the specified date range
  LAST_VALUE(device_advertising_id) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_advertising_id
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.traffic_source` as T
  ON E.traffic_source_id = T.traffic_source_id
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON E.device_type_id = D.device_type_id
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.location` as L
  ON E.location_id = L.location_id
  -- Filtering events within the specified date range and with valid session IDs and device operating systems
  WHERE event_date BETWEEN end_date AND input_date
  AND ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
);

-- Creating a temporary table `events_users` to store distinct user IDs for users with events within the specified date range
-- All users in the platform
CREATE OR REPLACE TEMP TABLE events_users as (
  SELECT DISTINCT
  -- Unique identifier for the user
  Users.user_pseudo_id,
  -- User's actual ID (if available)
  Users.user_id,
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON Users.device_type_id = D.device_type_id
  WHERE 
  -- Filtering events with valid session IDs, device operating systems, and within the specified date range
  ga_session_id IS NOT NULL
  AND device_os IS NOT NULL
  AND event_date BETWEEN end_date AND input_date
);

-- Creating a temporary table `DataForTargetTable` to store data for inserting into the target table
CREATE OR REPLACE TEMP TABLE DataForTargetTable AS
  SELECT DISTINCT
    -- Current timestamp for data processing
    CURRENT_TIMESTAMP() AS processed_timestamp,
    -- Date for which features are being calculated
    input_date AS feature_date,
    -- Unique identifier for the user
    EU.user_pseudo_id,
    -- User's actual ID (if available, otherwise NULL)
    MAX(COALESCE(EU.user_id, '')) AS user_id,
    -- User's lifetime value revenue
    MAX(COALESCE(UDESS.user_ltv_revenue, 0.0)) AS user_ltv_revenue,
    -- User's device category
    MAX(COALESCE(UDESS.device_category, '')) AS device_category,
    -- User's device mobile brand name
    MAX(COALESCE(UDESS.device_mobile_brand_name, '')) AS device_mobile_brand_name,
    -- User's device mobile model name
    MAX(COALESCE(UDESS.device_mobile_model_name, '')) AS device_mobile_model_name,
    -- User's device operating system
    MAX(COALESCE(UDESS.device_os, '')) AS device_os,
    -- User's device language
    MAX(COALESCE(UDESS.device_language, '')) AS device_language,
    -- User's device web browser
    MAX(COALESCE(UDESS.device_web_browser, '')) AS device_web_browser,
    -- User's most frequent geographical subcontinent
    APPROX_TOP_COUNT(COALESCE(UDESS.geo_sub_continent, ''), 1)[OFFSET(0)].value AS geo_sub_continent,
    -- User's most frequent geographical country
    APPROX_TOP_COUNT(COALESCE(UDESS.geo_country, ''), 1)[OFFSET(0)].value AS geo_country,
    -- User's most frequent geographical region
    APPROX_TOP_COUNT(COALESCE(UDESS.geo_region, ''), 1)[OFFSET(0)].value AS geo_region,
    -- User's most frequent geographical city
    APPROX_TOP_COUNT(COALESCE(UDESS.geo_city, ''), 1)[OFFSET(0)].value AS geo_city,
    -- User's most frequent geographical metro area
    APPROX_TOP_COUNT(COALESCE(UDESS.geo_metro, ''), 1)[OFFSET(0)].value AS geo_metro,
    -- User's last traffic source medium
    MAX(COALESCE(UDESS.last_traffic_source_medium, '')) AS last_traffic_source_medium,
    -- User's last traffic source name
    MAX(COALESCE(UDESS.last_traffic_source_name, '')) AS last_traffic_source_name,
    -- User's last traffic source
    MAX(COALESCE(UDESS.last_traffic_source_source, '')) AS last_traffic_source_source,
    -- User's first traffic source medium
    MAX(COALESCE(UDESS.first_traffic_source_medium, '')) AS first_traffic_source_medium,
    -- User's first traffic source name
    MAX(COALESCE(UDESS.first_traffic_source_name, '')) AS first_traffic_source_name,
    -- User's first traffic source
    MAX(COALESCE(UDESS.first_traffic_source_source, '')) AS first_traffic_source_source,
    -- Flag indicating if the user has signed in with a user ID
    MAX(COALESCE(UDESS.has_signed_in_with_user_id, FALSE)) AS has_signed_in_with_user_id
  FROM events_users EU
  LEFT JOIN user_dimensions_event_session_scoped UDESS
  ON EU.user_pseudo_id = UDESS.user_pseudo_id
  -- Grouping the results by date and user ID
  GROUP BY input_date, EU.user_pseudo_id
;

-- Merging data from `DataForTargetTable` into the target table
MERGE `{{project_id}}.{{dataset}}.{{insert_table}}` I
USING DataForTargetTable T
  ON I.feature_date = T.feature_date
  AND I.user_pseudo_id = T.user_pseudo_id
WHEN MATCHED THEN
  -- Updating existing records with data from `DataForTargetTable`
  UPDATE SET 
    I.processed_timestamp = T.processed_timestamp,
    I.user_id = T.user_id,
    I.user_ltv_revenue = T.user_ltv_revenue,
    I.device_category = T.device_category,
    I.device_mobile_brand_name = T.device_mobile_brand_name,
    I.device_mobile_model_name = T.device_mobile_model_name,
    I.device_os = T.device_os,
    I.device_language = T.device_language,
    I.device_web_browser = T.device_web_browser,
    I.geo_sub_continent = T.geo_sub_continent,
    I.geo_country = T.geo_country,
    I.geo_region = T.geo_region,
    I.geo_city = T.geo_city,
    I.geo_metro = T.geo_metro,
    I.last_traffic_source_medium = T.last_traffic_source_medium,
    I.last_traffic_source_name = T.last_traffic_source_name,
    I.last_traffic_source_source = T.last_traffic_source_source,
    I.first_traffic_source_medium = T.first_traffic_source_medium,
    I.first_traffic_source_name = T.first_traffic_source_name,
    I.first_traffic_source_source = T.first_traffic_source_source,
    I.has_signed_in_with_user_id = T.has_signed_in_with_user_id
WHEN NOT MATCHED THEN
  -- Inserting new records from `DataForTargetTable`
  INSERT 
    (processed_timestamp,
     feature_date,
     user_pseudo_id,
     user_id,
     user_ltv_revenue,
     device_category,
     device_mobile_brand_name,
     device_mobile_model_name,
     device_os,
     device_language,
     device_web_browser,
     geo_sub_continent,
     geo_country,
     geo_region,
     geo_city,
     geo_metro,
     last_traffic_source_medium,
     last_traffic_source_name,
     last_traffic_source_source,
     first_traffic_source_medium,
     first_traffic_source_name,
     first_traffic_source_source,
     has_signed_in_with_user_id)
  VALUES
    (T.processed_timestamp,
     T.feature_date,
     T.user_pseudo_id,
     T.user_id,
     T.user_ltv_revenue,
     T.device_category,
     T.device_mobile_brand_name,
     T.device_mobile_model_name,
     T.device_os,
     T.device_language,
     T.device_web_browser,
     T.geo_sub_continent,
     T.geo_country,
     T.geo_region,
     T.geo_city,
     T.geo_metro,
     T.last_traffic_source_medium,
     T.last_traffic_source_name,
     T.last_traffic_source_source,
     T.first_traffic_source_medium,
     T.first_traffic_source_name,
     T.first_traffic_source_source,
     T.has_signed_in_with_user_id)
;

-- Count the number of distinct users added to the target table
SET rows_added = (SELECT COUNT(DISTINCT user_pseudo_id) FROM `{{project_id}}.{{dataset}}.{{insert_table}}`);
