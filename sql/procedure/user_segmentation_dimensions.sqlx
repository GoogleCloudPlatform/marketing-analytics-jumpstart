-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- Setting procedure to lookback from the day before `input_date` until the day before `end_date`
SET input_date = DATE_SUB(input_date, INTERVAL 1 DAY);
SET end_date = DATE_SUB(end_date, INTERVAL 1 DAY);

-- This table is designed to capture various user-level dimensions (attributes) for each distinct user and input_date combination. 
-- It uses window functions (LAST_VALUE, FIRST_VALUE) to determine the most recent occurrence of certain events within a given date range.
CREATE OR REPLACE TEMP TABLE user_dimensions_event_session_scoped as (
  SELECT DISTINCT
  user_pseudo_id,
  -- User Lifetime Value (LTV) revenue, obtained from the last event for the user on the input_date.
  LAST_VALUE(user_ltv_revenue) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS user_ltv_revenue,
  -- Last traffic source medium (e.g., "organic", "cpc", etc.) based on the last event for the user on the input_date.
  LAST_VALUE(T.traffic_source_medium) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS last_traffic_source_medium,
  -- Last traffic source name (e.g., "google", "email", etc.) based on the last event for the user on the input_date.
  LAST_VALUE(T.traffic_source_name) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS last_traffic_source_name,
  -- Last traffic source (e.g., "google", "email", etc.) based on the last event for the user on the input_date.
  LAST_VALUE(T.traffic_source) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS last_traffic_source_source,
  -- Categorizes the user as "new" if their first touch timestamp is less than 7 days ago or if it's null, otherwise "existing".
  LAST_VALUE(CASE WHEN (TIMESTAMP_DIFF(event_timestamp, user_first_touch_timestamp, DAY) < 7) OR (user_first_touch_timestamp IS NULL) THEN 'new' ELSE 'existing' END) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS new_or_established_user,
  -- Last subcontinent of the user based on the last event for the user on the input_date.
  LAST_VALUE(L.subcontinent) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as geo_sub_continent,
  -- Last country of the user based on the last event for the user on the input_date.
  LAST_VALUE(L.country) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as geo_country,
  -- Last region of the user based on the last event for the user on the input_date.
  LAST_VALUE(L.region) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as geo_region,
  -- Last city of the user based on the last event for the user on the input_date.
  LAST_VALUE(L.city) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as geo_city,
  -- Last metro of the user based on the last event for the user on the input_date.
  LAST_VALUE(L.metro) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as geo_metro,
  -- First traffic source medium (e.g., "organic", "cpc", etc.) based on the first event for the user on the input_date.
  FIRST_VALUE(T.traffic_source_medium) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS first_traffic_source_medium,
  -- First traffic source name (e.g., "google", "email", etc.) based on the first event for the user on the input_date.
  FIRST_VALUE(T.traffic_source_name) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS first_traffic_source_name,
  -- First traffic source (e.g., "google", "email", etc.) based on the first event for the user on the input_date.
  FIRST_VALUE(T.traffic_source) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS first_traffic_source_source,
  -- Indicates whether the user has signed in with a user_id based on the first event for the user on the input_date.
  MAX(CASE WHEN user_id IS NOT NULL THEN TRUE ELSE FALSE END) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS has_signed_in_with_user_id,
  -- Last device category (e.g., "mobile", "desktop", etc.) based on the last event for the user on the input_date.
  LAST_VALUE(device_category) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_category,
  -- Last mobile brand name of the user based on the last event for the user on the input_date.
  LAST_VALUE(device_mobile_brand_name) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_mobile_brand_name,
  -- Last mobile model name of the user based on the last event for the user on the input_date.
  LAST_VALUE(device_mobile_model_name) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_mobile_model_name,
  -- Last device operating system (e.g., "Android", "iOS", etc.) based on the last event for the user on the input_date.
  LAST_VALUE(device_os) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_os,
  -- Last language of the user based on the last event for the user on the input_date.
  LAST_VALUE(language) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS device_language,
  -- Last web browser of the user based on the last event for the user on the input_date.
  LAST_VALUE(device_web_browser) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_web_browser,
  -- Last device advertising ID of the user based on the last event for the user on the input_date.
  LAST_VALUE(device_advertising_id) OVER(PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) as device_advertising_id
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.traffic_source` as T
  ON E.traffic_source_id = T.traffic_source_id
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON E.device_type_id = D.device_type_id
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.location` as L
  ON E.location_id = L.location_id
  WHERE event_date BETWEEN end_date AND input_date
  AND ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
);

-- All users in the platform
-- This table captures all distinct users in the platform.
CREATE OR REPLACE TEMP TABLE events_users as (
  SELECT DISTINCT
  Users.user_pseudo_id,
  -- User ID, if available.
  Users.user_id,
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON Users.device_type_id = D.device_type_id
  WHERE ga_session_id IS NOT NULL
  AND device_os IS NOT NULL
  AND event_date BETWEEN end_date AND input_date
);


-- This table provides a combination of user dimensions and user IDs, with the date.
CREATE OR REPLACE TEMP TABLE DataForTargetTable AS
  SELECT DISTINCT
    -- Timestamp when the data was processed.
    CURRENT_TIMESTAMP() AS processed_timestamp,
    -- Input date for which the data is being processed.
    input_date as feature_date,
    -- User pseudo ID.
    EU.user_pseudo_id,
    -- User ID, if available (using MAX() to get the latest).
    MAX(EU.user_id) as user_id,
    -- User LTV Revenue, obtained using MAX() to get the latest value.
    MAX(UDESS.user_ltv_revenue) as user_ltv_revenue,
    -- Device category, obtained using MAX() to get the latest value.
    MAX(UDESS.device_category) as device_category,
    -- Mobile brand name, obtained using MAX() to get the latest value.
    MAX(UDESS.device_mobile_brand_name) as device_mobile_brand_name,
    -- Mobile model name, obtained using MAX() to get the latest value.
    MAX(UDESS.device_mobile_model_name) as device_mobile_model_name,
    -- Device operating system, obtained using MAX() to get the latest value.
    MAX(UDESS.device_os) as device_os,
    -- Device language, obtained using MAX() to get the latest value.
    MAX(UDESS.device_language) as device_language,
    -- Device web browser, obtained using MAX() to get the latest value.
    MAX(UDESS.device_web_browser) as device_web_browser,
    -- Subcontinent, obtained using APPROX_TOP_COUNT to get the most frequent value for each user.
    APPROX_TOP_COUNT(UDESS.geo_sub_continent, 1)[OFFSET(0)].value as geo_sub_continent,
    -- Country, obtained using APPROX_TOP_COUNT to get the most frequent value for each user.
    APPROX_TOP_COUNT(UDESS.geo_country, 1)[OFFSET(0)].value as geo_country,
    -- Region, obtained using APPROX_TOP_COUNT to get the most frequent value for each user.
    APPROX_TOP_COUNT(UDESS.geo_region, 1)[OFFSET(0)].value as geo_region,
    -- City, obtained using APPROX_TOP_COUNT to get the most frequent value for each user.
    APPROX_TOP_COUNT(UDESS.geo_city, 1)[OFFSET(0)].value as geo_city,
    -- Metro, obtained using APPROX_TOP_COUNT to get the most frequent value for each user.
    APPROX_TOP_COUNT(UDESS.geo_metro, 1)[OFFSET(0)].value as geo_metro,
    -- Last traffic source medium, obtained using MAX() to get the latest value.
    MAX(UDESS.last_traffic_source_medium) as last_traffic_source_medium,
    -- Last traffic source name, obtained using MAX() to get the latest value.
    MAX(UDESS.last_traffic_source_name) as last_traffic_source_name,
    -- Last traffic source, obtained using MAX() to get the latest value.
    MAX(UDESS.last_traffic_source_source) as last_traffic_source_source,
    -- First traffic source medium, obtained using MAX() to get the latest value.
    MAX(UDESS.first_traffic_source_medium) as first_traffic_source_medium,
    -- First traffic source name, obtained using MAX() to get the latest value.
    MAX(UDESS.first_traffic_source_name) as first_traffic_source_name,
    -- First traffic source, obtained using MAX() to get the latest value.
    MAX(UDESS.first_traffic_source_source) as first_traffic_source_source,
    -- Indicates whether the user has signed in with a user_id, obtained using MAX() to get the latest value.
    MAX(UDESS.has_signed_in_with_user_id) as has_signed_in_with_user_id
  FROM events_users EU
  INNER JOIN user_dimensions_event_session_scoped UDESS
  ON EU.user_pseudo_id = UDESS.user_pseudo_id --AND EU.user_id = UDESS.user_id
  GROUP BY input_date, EU.user_pseudo_id
;

-- This MERGE statement combines UPDATE and INSERT operations to efficiently manage data in the target table.
MERGE `{{project_id}}.{{dataset}}.{{insert_table}}` I
USING DataForTargetTable T
-- Matching condition based on feature_date and user_pseudo_id.
ON I.feature_date = T.feature_date
  AND I.user_pseudo_id = T.user_pseudo_id
-- When a matching row is found in the target table, it's updated.
WHEN MATCHED THEN
  UPDATE SET 
    I.processed_timestamp = T.processed_timestamp,
    I.user_id = T.user_id,
    I.user_ltv_revenue = T.user_ltv_revenue,
    I.device_category = T.device_category,
    I.device_mobile_brand_name = T.device_mobile_brand_name,
    I.device_mobile_model_name = T.device_mobile_model_name,
    I.device_os = T.device_os,
    I.device_language = T.device_language,
    I.device_web_browser = T.device_web_browser,
    I.geo_sub_continent = T.geo_sub_continent,
    I.geo_country = T.geo_country,
    I.geo_region = T.geo_region,
    I.geo_city = T.geo_city,
    I.geo_metro = T.geo_metro,
    I.last_traffic_source_medium = T.last_traffic_source_medium,
    I.last_traffic_source_name = T.last_traffic_source_name,
    I.last_traffic_source_source = T.last_traffic_source_source,
    I.first_traffic_source_medium = T.first_traffic_source_medium,
    I.first_traffic_source_name = T.first_traffic_source_name,
    I.first_traffic_source_source = T.first_traffic_source_source,
    I.has_signed_in_with_user_id = T.has_signed_in_with_user_id
-- When a row from DataForTargetTable doesn't match any existing row in the target table, a new row is inserted.
WHEN NOT MATCHED THEN
  INSERT 
    (processed_timestamp,
     feature_date,
     user_pseudo_id,
     user_id,
     user_ltv_revenue,
     device_category,
     device_mobile_brand_name,
     device_mobile_model_name,
     device_os,
     device_language,
     device_web_browser,
     geo_sub_continent,
     geo_country,
     geo_region,
     geo_city,
     geo_metro,
     last_traffic_source_medium,
     last_traffic_source_name,
     last_traffic_source_source,
     first_traffic_source_medium,
     first_traffic_source_name,
     first_traffic_source_source,
     has_signed_in_with_user_id)
  VALUES
    (T.processed_timestamp,
     T.feature_date,
     T.user_pseudo_id,
     T.user_id,
     T.user_ltv_revenue,
     T.device_category,
     T.device_mobile_brand_name,
     T.device_mobile_model_name,
     T.device_os,
     T.device_language,
     T.device_web_browser,
     T.geo_sub_continent,
     T.geo_country,
     T.geo_region,
     T.geo_city,
     T.geo_metro,
     T.last_traffic_source_medium,
     T.last_traffic_source_name,
     T.last_traffic_source_source,
     T.first_traffic_source_medium,
     T.first_traffic_source_name,
     T.first_traffic_source_source,
     T.has_signed_in_with_user_id)
;

-- This query calculates the number of distinct user_pseudo_ids added to the target table.
SET rows_added = (SELECT COUNT(DISTINCT user_pseudo_id) FROM `{{project_id}}.{{dataset}}.{{insert_table}}`);
