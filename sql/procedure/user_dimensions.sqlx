-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- Setting procedure to lookback from the day before `input_date` until the day before `end_date`
SET input_date = DATE_SUB(input_date, INTERVAL 1 DAY);
SET end_date = DATE_SUB(end_date, INTERVAL 1 DAY);

-- Create a temporary table to store user-level features scoped to the session level
CREATE OR REPLACE TEMP TABLE user_dimensions_event_session_scoped as (
  SELECT DISTINCT
  -- User's pseudo ID
  user_pseudo_id,
  -- The last recorded lifetime value revenue for the user, considering session and input_date
  LAST_VALUE(user_ltv_revenue) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS user_ltv_revenue,
  -- The last recorded traffic source medium for the user, considering session and input_date
  LAST_VALUE(T.traffic_source_medium) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS last_traffic_source_medium,
  -- The last recorded traffic source name for the user, considering session and input_date
  LAST_VALUE(T.traffic_source_name) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS last_traffic_source_name,
  -- The last recorded traffic source for the user, considering session and input_date
  LAST_VALUE(T.traffic_source) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS last_traffic_source_source,
  -- Whether the user is new or existing based on the time difference between the event and their first touch timestamp, considering session and input_date
  LAST_VALUE(CASE WHEN (TIMESTAMP_DIFF(event_timestamp, user_first_touch_timestamp, DAY) < 7) OR (user_first_touch_timestamp IS NULL) THEN 'new' ELSE 'existing' END) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS new_or_established_user,
  -- The last recorded subcontinent for the user, considering session and input_date
  LAST_VALUE(L.subcontinent) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS geo_sub_continent,
  -- The last recorded country for the user, considering session and input_date
  LAST_VALUE(L.country) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS geo_country,
  -- The last recorded region for the user, considering session and input_date
  LAST_VALUE(L.region) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS geo_region,
  -- The last recorded city for the user, considering session and input_date
  LAST_VALUE(L.city) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS geo_city,
  -- The last recorded metro area for the user, considering session and input_date
  LAST_VALUE(L.metro) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS geo_metro,
  -- The first recorded traffic source medium for the user, considering session and input_date
  FIRST_VALUE(T.traffic_source_medium) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS first_traffic_source_medium,
  -- The first recorded traffic source name for the user, considering session and input_date
  FIRST_VALUE(T.traffic_source_name) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS first_traffic_source_name,
  -- The first recorded traffic source for the user, considering session and input_date
  FIRST_VALUE(T.traffic_source) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS first_traffic_source_source,
  -- Indicates if the user has signed in with a user ID, considering session and input_date
  MAX(CASE WHEN user_id IS NOT NULL THEN TRUE ELSE FALSE END) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp ASC) AS has_signed_in_with_user_id,
  -- The last recorded device category for the user, considering session and input_date
  LAST_VALUE(device_category) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS device_category,
  -- The last recorded mobile brand name for the user, considering session and input_date
  LAST_VALUE(device_mobile_brand_name) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS device_mobile_brand_name,
  -- The last recorded mobile model name for the user, considering session and input_date
  LAST_VALUE(device_mobile_model_name) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS device_mobile_model_name,
  -- The last recorded device operating system for the user, considering session and input_date
  LAST_VALUE(device_os) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS device_os,
  -- The last recorded device language for the user, considering session and input_date
  LAST_VALUE(language) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS device_language,
  -- The last recorded web browser for the user, considering session and input_date
  LAST_VALUE(device_web_browser) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS device_web_browser,
  -- The last recorded advertising ID for the user's device, considering session and input_date
  LAST_VALUE(device_advertising_id) OVER (PARTITION BY user_pseudo_id, input_date ORDER BY event_timestamp DESC) AS device_advertising_id
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.traffic_source` as T
  ON E.traffic_source_id = T.traffic_source_id
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON E.device_type_id = D.device_type_id
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.location` as L
  ON E.location_id = L.location_id
  -- Filtering events within the specified date range and with valid session IDs and device operating systems
  WHERE event_date BETWEEN end_date AND input_date
  AND ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
);

-- Create a temporary table to store all distinct users in the platform during the specified date range
-- All users in the platform
CREATE OR REPLACE TEMP TABLE events_users as (
  SELECT DISTINCT
  -- User's pseudo ID
  Users.user_pseudo_id,
  -- User's actual ID (if available)
  Users.user_id,
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON Users.device_type_id = D.device_type_id
  WHERE ga_session_id IS NOT NULL
  AND device_os IS NOT NULL
  -- Filtering events within the specified date range
  AND event_date BETWEEN end_date AND input_date
);

-- Create a temporary table to store data ready to be inserted into the target table
CREATE OR REPLACE TEMP TABLE DataForTargetTable AS
  SELECT DISTINCT
    -- Timestamp of data processing
    CURRENT_TIMESTAMP() AS processed_timestamp,
    -- Feature date for the aggregated data
    input_date AS feature_date,
    -- User's pseudo ID
    EU.user_pseudo_id,
    -- User's ID (if available)
    MAX(EU.user_id) AS user_id,
    -- User's lifetime value revenue
    MAX(UDESS.user_ltv_revenue) AS user_ltv_revenue,
    -- User's device category
    MAX(UDESS.device_category) AS device_category,
    -- User's device mobile brand name
    MAX(UDESS.device_mobile_brand_name) AS device_mobile_brand_name,
    -- User's device mobile model name
    MAX(UDESS.device_mobile_model_name) AS device_mobile_model_name,
    -- User's device operating system
    MAX(UDESS.device_os) AS device_os,
    -- User's device language
    MAX(UDESS.device_language) AS device_language,
    -- User's device web browser
    MAX(UDESS.device_web_browser) AS device_web_browser,
    -- User's most frequent geographical subcontinent
    APPROX_TOP_COUNT(UDESS.geo_sub_continent, 1)[OFFSET(0)].value AS geo_sub_continent,
    -- User's most frequent geographical country
    APPROX_TOP_COUNT(UDESS.geo_country, 1)[OFFSET(0)].value AS geo_country,
    -- User's most frequent geographical region
    APPROX_TOP_COUNT(UDESS.geo_region, 1)[OFFSET(0)].value AS geo_region,
    -- User's most frequent geographical city
    APPROX_TOP_COUNT(UDESS.geo_city, 1)[OFFSET(0)].value AS geo_city,
    -- User's most frequent geographical metro area
    APPROX_TOP_COUNT(UDESS.geo_metro, 1)[OFFSET(0)].value AS geo_metro,
    -- User's last traffic source medium
    MAX(UDESS.last_traffic_source_medium) AS last_traffic_source_medium,
    -- User's last traffic source name
    MAX(UDESS.last_traffic_source_name) AS last_traffic_source_name,
    -- User's last traffic source
    MAX(UDESS.last_traffic_source_source) AS last_traffic_source_source,
    -- User's first traffic source medium
    MAX(UDESS.first_traffic_source_medium) AS first_traffic_source_medium,
    -- User's first traffic source name
    MAX(UDESS.first_traffic_source_name) AS first_traffic_source_name,
    -- User's first traffic source
    MAX(UDESS.first_traffic_source_source) AS first_traffic_source_source,
    -- Flag indicating if the user has signed in with a user ID
    MAX(UDESS.has_signed_in_with_user_id) AS has_signed_in_with_user_id
  FROM events_users EU
  INNER JOIN user_dimensions_event_session_scoped UDESS
  ON EU.user_pseudo_id = UDESS.user_pseudo_id --AND EU.user_id = UDESS.user_id
  GROUP BY input_date, EU.user_pseudo_id
;

-- Merge the DataForTargetTable into the target table
MERGE `{{project_id}}.{{dataset}}.{{insert_table}}` I
USING DataForTargetTable T
ON I.feature_date = T.feature_date
  AND I.user_pseudo_id = T.user_pseudo_id
WHEN MATCHED THEN
  -- Update existing rows with new data
  UPDATE SET 
    I.processed_timestamp = T.processed_timestamp,
    I.user_id = T.user_id,
    I.user_ltv_revenue = T.user_ltv_revenue,
    I.device_category = T.device_category,
    I.device_mobile_brand_name = T.device_mobile_brand_name,
    I.device_mobile_model_name = T.device_mobile_model_name,
    I.device_os = T.device_os,
    I.device_language = T.device_language,
    I.device_web_browser = T.device_web_browser,
    I.geo_sub_continent = T.geo_sub_continent,
    I.geo_country = T.geo_country,
    I.geo_region = T.geo_region,
    I.geo_city = T.geo_city,
    I.geo_metro = T.geo_metro,
    I.last_traffic_source_medium = T.last_traffic_source_medium,
    I.last_traffic_source_name = T.last_traffic_source_name,
    I.last_traffic_source_source = T.last_traffic_source_source,
    I.first_traffic_source_medium = T.first_traffic_source_medium,
    I.first_traffic_source_name = T.first_traffic_source_name,
    I.first_traffic_source_source = T.first_traffic_source_source,
    I.has_signed_in_with_user_id = T.has_signed_in_with_user_id
WHEN NOT MATCHED THEN
  -- Insert new rows
  INSERT 
    (processed_timestamp,
     feature_date,
     user_pseudo_id,
     user_id,
     user_ltv_revenue,
     device_category,
     device_mobile_brand_name,
     device_mobile_model_name,
     device_os,
     device_language,
     device_web_browser,
     geo_sub_continent,
     geo_country,
     geo_region,
     geo_city,
     geo_metro,
     last_traffic_source_medium,
     last_traffic_source_name,
     last_traffic_source_source,
     first_traffic_source_medium,
     first_traffic_source_name,
     first_traffic_source_source,
     has_signed_in_with_user_id)
  VALUES
    (T.processed_timestamp,
     T.feature_date,
     T.user_pseudo_id,
     T.user_id,
     T.user_ltv_revenue,
     T.device_category,
     T.device_mobile_brand_name,
     T.device_mobile_model_name,
     T.device_os,
     T.device_language,
     T.device_web_browser,
     T.geo_sub_continent,
     T.geo_country,
     T.geo_region,
     T.geo_city,
     T.geo_metro,
     T.last_traffic_source_medium,
     T.last_traffic_source_name,
     T.last_traffic_source_source,
     T.first_traffic_source_medium,
     T.first_traffic_source_name,
     T.first_traffic_source_source,
     T.has_signed_in_with_user_id)
;

-- Count the number of distinct users added to the target table
SET rows_added = (SELECT COUNT(DISTINCT user_pseudo_id) FROM `{{project_id}}.{{dataset}}.{{insert_table}}`);
