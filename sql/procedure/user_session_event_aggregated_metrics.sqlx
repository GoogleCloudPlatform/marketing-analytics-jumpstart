-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
  
-- Setting procedure to lookback from the day before `input_date` until the day before `end_date`
SET input_date = DATE_SUB(input_date, INTERVAL 1 DAY);
SET end_date = DATE_SUB(end_date, INTERVAL 1 DAY);

CREATE OR REPLACE TEMP TABLE dates_interval as (
SELECT 
    input_date,
    end_date
);

-- What is the user-per-day session-scoped engagement?
CREATE OR REPLACE TEMP TABLE engagement_per_day_session_scoped as (
SELECT
    user_pseudo_id,
    feature_date,
    SAFE_DIVIDE(
        COUNT(distinct case when session_engaged = true then concat(user_pseudo_id,session_id) end),
        COUNT(DISTINCT session_id)
    ) AS engagement_rate,
    COUNT(distinct case when session_engaged = true then concat(user_pseudo_id,session_id) end) as engaged_sessions_per_user,
    SAFE_DIVIDE(
        COUNTIF(session_conversion = true),
        COUNT(DISTINCT session_id)
    ) AS session_conversion_rate,
    COUNT(distinct case when session_engaged = false then concat(user_pseudo_id,session_id) end) as bounces,
    SAFE_DIVIDE(
        COUNT(distinct case when session_engaged = false then concat(user_pseudo_id,session_id) end),
        COUNT(DISTINCT session_id)
    ) as bounce_rate_per_user,
    COUNT(DISTINCT session_id) AS sessions_per_user,
    IFNULL(AVG(page_views_per_session),0) as avg_views_per_session,
    IFNULL(ROUND(SUM(engagement_time_msec)/1000),0) as sum_engagement_time_seconds,
    IFNULL(ROUND(AVG(engagement_time_msec)/1000),0) as avg_engagement_time_seconds,
    COUNTIF(new_visitor = true) as new_visits,
    COUNTIF(returning_visitor = true) as returning_visits
FROM ( 
    SELECT
        E.user_pseudo_id,
        input_date as feature_date,
        E.ga_session_id as session_id,
        IFNULL(MAX(S.session_engaged), false) as session_engaged,
        SUM(S.total_engagement_time_secs) as engagement_time_msec,
        MAX(S.new_visitor) as new_visitor,
        MAX(S.returning_visitor) as returning_visitor,
        MAX(CASE WHEN E.event_name='purchase' AND E.ecommerce.transaction_id IS NOT NULL THEN true ELSE false END) as session_conversion,
        COUNTIF(E.event_name='page_view') as page_views_per_session
    FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
    INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.session` as S
    ON E.ga_session_id = S.ga_session_id
    INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
    ON E.device_type_id = D.device_type_id
    CROSS JOIN dates_interval as DI
    WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
        AND E.ga_session_id IS NOT NULL
        AND D.device_os IS NOT NULL
    GROUP BY
        user_pseudo_id,
        feature_date,
        session_id)
GROUP BY user_pseudo_id, feature_date
);

-- Has the user purchased before, another day?
CREATE OR REPLACE TEMP TABLE returning_customers as (
SELECT 
    user_pseudo_id, 
    feature_date, 
    MAX(unique_purchase) as unique_purchase  
FROM (
    SELECT 
        user_pseudo_id, 
        input_date as feature_date, 
        RANK() OVER (PARTITION BY user_pseudo_id ORDER BY event_timestamp ASC) AS unique_purchase
    FROM `{{mds_project_id}}.{{mds_dataset}}.event` AS GA
    CROSS JOIN dates_interval as DI
    WHERE event_date BETWEEN DI.end_date AND DI.input_date
    AND event_name = 'purchase'
    GROUP BY user_pseudo_id, feature_date, event_timestamp
)
WHERE unique_purchase >= 2
GROUP BY user_pseudo_id, feature_date
);
CREATE OR REPLACE TEMP TABLE non_returning_customers as ( 
SELECT
        GA.user_pseudo_id,
        input_date as feature_date
FROM `{{mds_project_id}}.{{mds_dataset}}.event` AS GA
CROSS JOIN dates_interval as DI
WHERE event_date BETWEEN DI.end_date AND DI.input_date
GROUP BY user_pseudo_id, feature_date
EXCEPT DISTINCT SELECT user_pseudo_id, feature_date FROM returning_customers as RC
);
CREATE OR REPLACE TEMP TABLE combined as (
SELECT 
    user_pseudo_id, 
    feature_date, 
    unique_purchase
FROM returning_customers  
UNION ALL
SELECT 
    user_pseudo_id, 
    feature_date, 
    -1
    FROM non_returning_customers 
GROUP BY user_pseudo_id, feature_date
);
CREATE OR REPLACE TEMP TABLE repeated_purchase as (
SELECT
    user_pseudo_id,
    feature_date, 
    CASE WHEN unique_purchase >= 0 THEN unique_purchase ELSE 0 END AS how_many_purchased_before
FROM 
    combined
);

-- Has the user abandoned any cart by day?
CREATE OR REPLACE TEMP TABLE returned_cart_to_purchase as (
SELECT 
user_pseudo_id, 
feature_date,
MAX(session_order) as max_session_order_in_day, 
CASE WHEN MAX(begun_checkout) >= 1 THEN True ELSE False END as begun_checkout, 
CASE WHEN MAX(event_order) >= 2 THEN True ELSE False END as has_purchased  
FROM (
    SELECT 
        GA.user_pseudo_id, 
        input_date as feature_date,
        MAX(S.session_number) as session_order,
        CASE WHEN MAX(event_name) = 'begin_checkout' THEN 1 ELSE 0 END as begun_checkout,
        RANK() OVER (PARTITION BY GA.user_pseudo_id ORDER BY event_timestamp ASC ) AS event_order
    FROM `{{mds_project_id}}.{{mds_dataset}}.event` AS GA
    INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.session` as S
    ON GA.ga_session_id = S.ga_session_id
    INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
    ON GA.device_type_id = D.device_type_id
    CROSS JOIN dates_interval as DI
    WHERE event_date BETWEEN DI.end_date AND DI.input_date
        AND event_name IN ('begin_checkout','purchase')
        AND GA.ga_session_id IS NOT NULL
        AND D.device_os IS NOT NULL
    GROUP BY GA.user_pseudo_id, feature_date, GA.event_timestamp
)
GROUP BY user_pseudo_id, feature_date
);

CREATE OR REPLACE TEMP TABLE cart_to_purchase AS (
SELECT
    GA.user_pseudo_id, 
    input_date as feature_date,
    CASE WHEN (MAX(r.begun_checkout) AND NOT MAX(r.has_purchased)) THEN True ELSE False END as has_abandoned_cart,
FROM `{{mds_project_id}}.{{mds_dataset}}.event` AS GA
INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
    ON GA.device_type_id = D.device_type_id
CROSS JOIN dates_interval as DI
LEFT JOIN returned_cart_to_purchase AS r
ON r.user_pseudo_id = GA.user_pseudo_id AND r.feature_date = DI.input_date
WHERE event_date BETWEEN DI.end_date AND DI.input_date
    AND GA.ga_session_id IS NOT NULL
    AND D.device_os IS NOT NULL
GROUP BY user_pseudo_id, feature_date
);

-- What is the user-events-per-day event-scoped metrics performance?
CREATE OR REPLACE TEMP TABLE user_events_per_day_event_scoped as (
SELECT
    user_pseudo_id,
    feature_date,
    IFNULL(SUM(add_to_cart_per_session),0) as add_to_carts,
    IFNULL(SAFE_DIVIDE(
        SUM(add_to_cart_per_session),
        SUM(view_item_per_session)
    ), 0.0) AS cart_to_view_rate, 
    IFNULL(SUM(checkouts_per_session),0) AS checkouts,
    IFNULL(SUM(ecommerce_purchases_per_session),0) AS ecommerce_purchases,
    IFNULL(SUM(ecommerce_quantity_per_session),0) AS ecommerce_quantity,
    IFNULL(SUM(ecommerce_revenue_per_session),0) AS ecommerce_revenue,
    --IFNULL(SUM(item_discount_per_session),0) AS item_discount_amount,
    IFNULL(SUM(item_revenue_per_session),0.0) AS item_revenue,
    IFNULL(SUM(item_quantity_per_session),0) AS item_quantity,
    IFNULL(SUM(item_refund_amount_per_session),0.0) AS item_refund_amount,
    IFNULL(SUM(item_view_events_per_session),0) AS item_view_events,
    IFNULL(SUM(items_clicked_in_promotion_per_session),0) AS items_clicked_in_promotion,
    IFNULL(SUM(items_clicked_in_list_per_session),0) AS items_clicked_in_list,
    IFNULL(SUM(items_checked_out_per_session),0) AS items_checked_out,
    IFNULL(SUM(items_added_to_cart_per_session),0) AS items_added_to_cart,
    IFNULL(SUM(item_list_click_events_per_session),0) AS item_list_click_events,
    IFNULL(SUM(item_list_view_events_per_session),0) AS item_list_view_events,
    IFNULL(SUM(purchase_revenue_per_session),0.0) AS purchase_revenue,
    IFNULL(SAFE_DIVIDE(
        SUM(user_who_purchased_per_session),
        SUM(user_who_viewed_items_per_session)
    ), 0.0) AS purchase_to_view_rate,
    IFNULL(SUM(refunds_per_session),0.0) AS refunds,
    IFNULL(SAFE_DIVIDE(
        SUM(transactions_per_session),
        SUM(purchasers_per_session)
    ), 0.0) AS transactions_per_purchaser,
    IFNULL(SAFE_DIVIDE(
        SUM(ecommerce_purchases_per_session),
        COUNT(DISTINCT event_timestamp))
        ,0.0) AS user_conversion_rate
FROM (
    SELECT
        user_pseudo_id,
        input_date as feature_date,
        event_timestamp,
        ga_session_id as session_id,
        COUNTIF(event_name='add_to_cart') as add_to_cart_per_session,
        COUNTIF(event_name='view_item') as view_item_per_session,
        COUNTIF(event_name='begin_checkout') as checkouts_per_session,
        COUNTIF(event_name='purchase' AND ecommerce.transaction_id IS NOT NULL) as ecommerce_purchases_per_session,
        SUM(CASE WHEN event_name='purchase' AND ecommerce.transaction_id IS NOT NULL THEN ecommerce.total_item_quantity ELSE 0 END) as ecommerce_quantity_per_session,
        SUM(CASE WHEN event_name='purchase' AND ecommerce.transaction_id IS NOT NULL THEN ecommerce.purchase_revenue_in_usd ELSE 0 END) as ecommerce_revenue_per_session,
        --SUM((select SUM(discount*quantity) from unnest(items) where event_name = 'purchase' AND ecommerce.transaction_id IS NOT NULL AND discount IS NOT NULL)) as item_discount_per_session,
        SUM((select SUM(item_revenue) from unnest(items) where event_name = 'purchase' AND ecommerce.transaction_id IS NOT NULL AND item_revenue IS NOT NULL)) as item_revenue_per_session,
        SUM((select SUM(quantity) from unnest(items) where event_name = 'purchase' AND ecommerce.transaction_id IS NOT NULL AND quantity IS NOT NULL)) as item_quantity_per_session,
        SUM((select item_refund from unnest(items) where event_name = 'purchase' AND ecommerce.transaction_id IS NOT NULL AND item_refund IS NOT NULL)) as item_refund_amount_per_session,
        COUNTIF(event_name='view_item') as item_view_events_per_session,
        SUM((select COUNT(DISTINCT item_id) from unnest(items) where event_name='view_item' AND (promotion_id IS NOT NULL OR promotion_name IS NOT NULL))) as items_clicked_in_promotion_per_session,
        SUM((select COUNT(DISTINCT item_id) from unnest(items) where event_name='click' AND (item_list_id IS NOT NULL OR item_list_name IS NOT NULL))) as items_clicked_in_list_per_session,
        SUM((select COUNT(DISTINCT item_id) from unnest(items) where event_name='begin_checkout' AND item_id IS NOT NULL)) as items_checked_out_per_session,
        SUM((select COUNT(DISTINCT item_id) from unnest(items) where event_name='add_to_cart' AND item_id IS NOT NULL)) as items_added_to_cart_per_session,
        SUM((select COUNT(DISTINCT item_list_id) from unnest(items) where event_name='click' AND (item_list_id IS NOT NULL OR item_list_name IS NOT NULL))) as item_list_click_events_per_session,
        SUM((select COUNT(DISTINCT item_list_id) from unnest(items) where event_name='view_item_list' AND (item_list_id IS NOT NULL OR item_list_name IS NOT NULL))) as item_list_view_events_per_session,
        (SUM(CASE WHEN event_name='purchase' AND ecommerce.transaction_id IS NOT NULL THEN ecommerce.purchase_revenue_in_usd ELSE 0.0 END) - SUM(CASE WHEN event_name='refund' AND ecommerce.transaction_id IS NOT NULL THEN ecommerce.refund_value_in_usd ELSE 0.0 END)) as purchase_revenue_per_session,
        COUNT(DISTINCT CASE WHEN event_name='purchase' AND ecommerce.transaction_id IS NOT NULL THEN user_pseudo_id END) as user_who_purchased_per_session,
        COUNT(DISTINCT CASE WHEN event_name='view_item' THEN user_pseudo_id END) as user_who_viewed_items_per_session,
        SUM(CASE WHEN event_name='refund' AND ecommerce.transaction_id IS NOT NULL THEN 1 ELSE 0 END) as refunds_per_session,
        COUNT(DISTINCT CASE WHEN ecommerce.transaction_id IS NOT NULL THEN ecommerce.transaction_id END) as transactions_per_session,
        COUNT(DISTINCT CASE WHEN event_name='purchase' AND ecommerce.transaction_id IS NOT NULL THEN user_pseudo_id END) as purchasers_per_session,
    FROM
        `{{mds_project_id}}.{{mds_dataset}}.event` as E
    INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
        ON E.device_type_id = D.device_type_id
    CROSS JOIN dates_interval as DI
    WHERE event_date BETWEEN DI.end_date AND DI.input_date
        AND E.ga_session_id IS NOT NULL
        AND D.device_os IS NOT NULL
    GROUP BY
        E.user_pseudo_id,
        E.ga_session_id,
        feature_date,
        E.event_timestamp)
    GROUP BY user_pseudo_id, feature_date
);

-- All users in the platform
CREATE OR REPLACE TEMP TABLE events_users_days as (
SELECT DISTINCT
    Users.user_pseudo_id,
    DI.input_date as feature_date
FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users 
INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
    ON Users.device_type_id = D.device_type_id
CROSS JOIN dates_interval as DI
WHERE event_date BETWEEN DI.end_date AND DI.input_date
    AND Users.ga_session_id IS NOT NULL
    AND D.device_os IS NOT NULL
);

CREATE OR REPLACE TEMP TABLE DataForTargetTable AS
SELECT
    CURRENT_TIMESTAMP() AS processed_timestamp,
    EUD.feature_date,
    EUD.user_pseudo_id,
    EPDSS.engagement_rate,
    EPDSS.engaged_sessions_per_user,
    EPDSS.session_conversion_rate,
    EPDSS.bounces,
    EPDSS.bounce_rate_per_user,
    EPDSS.sessions_per_user,
    EPDSS.avg_views_per_session,
    EPDSS.sum_engagement_time_seconds,
    EPDSS.avg_engagement_time_seconds,
    EPDSS.new_visits,
    EPDSS.returning_visits,
    UEPDES.add_to_carts,
    UEPDES.cart_to_view_rate,
    UEPDES.checkouts,
    UEPDES.ecommerce_purchases,
    UEPDES.ecommerce_quantity,
    UEPDES.ecommerce_revenue,
    UEPDES.item_revenue,
    UEPDES.item_quantity,
    UEPDES.item_refund_amount,
    UEPDES.item_view_events,
    UEPDES.items_clicked_in_promotion,
    UEPDES.items_clicked_in_list,
    UEPDES.items_checked_out,
    UEPDES.items_added_to_cart,
    UEPDES.item_list_click_events,
    UEPDES.item_list_view_events,
    UEPDES.purchase_revenue,
    UEPDES.purchase_to_view_rate,
    UEPDES.refunds,
    UEPDES.transactions_per_purchaser,
    UEPDES.user_conversion_rate,
    R.how_many_purchased_before,
    CP.has_abandoned_cart
FROM events_users_days EUD
INNER JOIN engagement_per_day_session_scoped EPDSS
ON EUD.user_pseudo_id = EPDSS.user_pseudo_id AND EUD.feature_date = EPDSS.feature_date
INNER JOIN user_events_per_day_event_scoped UEPDES
ON UEPDES.user_pseudo_id = EPDSS.user_pseudo_id AND UEPDES.feature_date = EPDSS.feature_date
INNER JOIN repeated_purchase R
ON R.user_pseudo_id = EPDSS.user_pseudo_id AND R.feature_date = EPDSS.feature_date
INNER JOIN cart_to_purchase CP
ON CP.user_pseudo_id = EPDSS.user_pseudo_id AND CP.feature_date = EPDSS.feature_date;

MERGE `{{project_id}}.{{dataset}}.{{insert_table}}` I
USING DataForTargetTable T
ON I.feature_date = T.feature_date
  AND I.user_pseudo_id = T.user_pseudo_id
WHEN MATCHED THEN
  UPDATE SET 
    I.processed_timestamp = T.processed_timestamp,
    I.engagement_rate = T.engagement_rate,
    I.engaged_sessions_per_user = T.engaged_sessions_per_user,
    I.session_conversion_rate = T.session_conversion_rate,
    I.bounces = T.bounces,
    I.bounce_rate_per_user = T.bounce_rate_per_user,
    I.sessions_per_user = T.sessions_per_user,
    I.avg_views_per_session = T.avg_views_per_session,
    I.sum_engagement_time_seconds = T.sum_engagement_time_seconds,
    I.avg_engagement_time_seconds = T.avg_engagement_time_seconds,
    I.new_visits = T.new_visits,
    I.returning_visits = T.returning_visits,
    I.add_to_carts = T.add_to_carts,
    I.cart_to_view_rate = T.cart_to_view_rate,
    I.checkouts = T.checkouts,
    I.ecommerce_purchases = T.ecommerce_purchases,
    I.ecommerce_quantity = T.ecommerce_quantity,
    I.ecommerce_revenue = T.ecommerce_revenue,
    I.item_revenue = T.item_revenue,
    I.item_quantity = T.item_quantity,
    I.item_refund_amount = T.item_refund_amount,
    I.item_view_events = T.item_view_events,
    I.items_clicked_in_promotion = T.items_clicked_in_promotion,
    I.items_clicked_in_list = T.items_clicked_in_list,
    I.items_checked_out = T.items_checked_out,
    I.items_added_to_cart = T.items_added_to_cart,
    I.item_list_click_events = T.item_list_click_events,
    I.item_list_view_events = T.item_list_view_events,
    I.purchase_revenue = T.purchase_revenue,
    I.purchase_to_view_rate = T.purchase_to_view_rate,
    I.refunds = T.refunds,
    I.transactions_per_purchaser = T.transactions_per_purchaser,
    I.user_conversion_rate = T.user_conversion_rate,
    I.how_many_purchased_before = T.how_many_purchased_before,
    I.has_abandoned_cart = T.has_abandoned_cart
WHEN NOT MATCHED THEN
  INSERT 
    (processed_timestamp,
     feature_date,
     user_pseudo_id,
     engagement_rate,
     engaged_sessions_per_user,
     session_conversion_rate,
     bounces,
     bounce_rate_per_user,
     sessions_per_user,
     avg_views_per_session,
     sum_engagement_time_seconds,
     avg_engagement_time_seconds,
     new_visits,
     returning_visits,
     add_to_carts,
     cart_to_view_rate,
     checkouts,
     ecommerce_purchases,
     ecommerce_quantity,
     ecommerce_revenue,
     item_revenue,
     item_quantity,
     item_refund_amount,
     item_view_events,
     items_clicked_in_promotion,
     items_clicked_in_list,
     items_checked_out,
     items_added_to_cart,
     item_list_click_events,
     item_list_view_events,
     purchase_revenue,
     purchase_to_view_rate,
     refunds,
     transactions_per_purchaser,
     user_conversion_rate,
     how_many_purchased_before,
     has_abandoned_cart)
  VALUES
    (T.processed_timestamp,
     T.feature_date,
     T.user_pseudo_id,
     T.engagement_rate,
     T.engaged_sessions_per_user,
     T.session_conversion_rate,
     T.bounces,
     T.bounce_rate_per_user,
     T.sessions_per_user,
     T.avg_views_per_session,
     T.sum_engagement_time_seconds,
     T.avg_engagement_time_seconds,
     T.new_visits,
     T.returning_visits,
     T.add_to_carts,
     T.cart_to_view_rate,
     T.checkouts,
     T.ecommerce_purchases,
     T.ecommerce_quantity,
     T.ecommerce_revenue,
     T.item_revenue,
     T.item_quantity,
     T.item_refund_amount,
     T.item_view_events,
     T.items_clicked_in_promotion,
     T.items_clicked_in_list,
     T.items_checked_out,
     T.items_added_to_cart,
     T.item_list_click_events,
     T.item_list_view_events,
     T.purchase_revenue,
     T.purchase_to_view_rate,
     T.refunds,
     T.transactions_per_purchaser,
     T.user_conversion_rate,
     T.how_many_purchased_before,
     T.has_abandoned_cart)
;

SET rows_added = (SELECT COUNT(DISTINCT user_pseudo_id) FROM `{{project_id}}.{{dataset}}.{{insert_table}}`);
