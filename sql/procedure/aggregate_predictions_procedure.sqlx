DECLARE
  project_id,
  table_pattern,
  clv_dataset,
  purchase_propensity_dataset,
  audience_segmentation_dataset,
  auto_audience_segmentation_dataset,
  clv_table,
  purchase_propensity_table,
  audience_segmentation_table,
  auto_audience_segmentation_table,
  first_join_common_selections,
  first_query_str,
  clv_selections,
  purchase_selections,
  first_join_selections,
  second_join_common_selections,
  audience_segmentation_selections,
  seccond_query_str,
  third_join_common_selections,
  second_join_selections,
  auto_audience_segmentation_selections,
  third_query_str STRING;
DECLARE
  clv_columns,
  clv_special_columns,
  purchase_propensity_columns,
  purchase_propensity_special_columns,
  audience_segmentation_columns,
  audience_segmentation_special_columns,
  auto_audience_segmentation_columns,
  first_join_common_columns,
  clv_select_columns,
  purchase_propensity_select_columns,
  first_join_columns,
  second_join_common_columns,
  first_join_select_columns,
  audience_segmentation_select_columns,
  second_join_columns,
  auto_audience_segmentation_select_columns,
  auto_audience_segmentation_special_columns,
  third_join_common_columns,
  second_join_select_columns ARRAY<STRING>;
SET
  project_id = '{{project_id}}';
CREATE OR REPLACE PROCEDURE
  {{dataset_id}}.get_columns_for_table(table_name STRING,
    data_set STRING,
    OUT table_columns ARRAY<STRING>)
BEGIN
DECLARE
  table_name_only STRING;
SET
  table_name_only = ( REGEXP_EXTRACT(table_name, r'.*\.(.*)') );
EXECUTE IMMEDIATE
  FORMAT("""
SELECT ARRAY_AGG(column_name)
  FROM `%s.`.INFORMATION_SCHEMA.COLUMNS
  WHERE table_name = '%s'
""", data_set, table_name_only) INTO table_columns;
END
  ;
CREATE OR REPLACE PROCEDURE
  {{dataset_id}}.get_latest_table_by_pattern(dataset_name STRING,
    table_pattern STRING,
    OUT table_name STRING)
BEGIN
EXECUTE IMMEDIATE
  FORMAT("""
CREATE OR REPLACE TEMPORARY TABLE temp_table  AS
SELECT
    CONCAT(dataset_id,'.',table_id) AS full_table_name
  FROM
    `%s.__TABLES__`
  WHERE
    table_id LIKE '%s'
  ORDER BY
    last_modified_time DESC
  LIMIT
    1;
    """, dataset_name, table_pattern);
SET
  table_name = (
  SELECT
    full_table_name
  FROM
    temp_table );
END
  ;
CREATE TEMP FUNCTION
  array_diff(src_array ARRAY<STRING>,
    rm_array ARRAY<STRING>)
  RETURNS ARRAY<STRING> AS ((
    SELECT
      ARRAY(
      SELECT
        DISTINCT element
      FROM
        UNNEST(src_array) AS element EXCEPT DISTINCT
      SELECT
        element
      FROM
        UNNEST(rm_array) AS element ) ));
CREATE TEMP FUNCTION
  array_common(arr_one ARRAY<STRING>,
    arr_two ARRAY<STRING>) AS ((
    SELECT
      ARRAY(
      SELECT
        element
      FROM
        UNNEST(arr_one) AS element
      WHERE
        element IN UNNEST(arr_two) ) ));
CREATE TEMP FUNCTION
  create_common_columns_select(common_columns ARRAY<STRING>,
    f_alias STRING,
    s_alias STRING)
  RETURNS STRING AS ((
    SELECT
      ARRAY_TO_STRING((
        SELECT
          ARRAY(
          SELECT
            CONCAT('COALESCE(',f_alias, '.', element, ',', s_alias,'.', element,') AS ', element)
          FROM
            UNNEST(common_columns) AS element) ), ',') ));
CREATE TEMP FUNCTION
  create_columns_select(COLUMNS ARRAY<STRING>,
    t_alias STRING)
  RETURNS STRING AS ((
    SELECT
      ARRAY_TO_STRING((
        SELECT
          ARRAY(
          SELECT
            CONCAT(t_alias, '.', element)
          FROM
            UNNEST(COLUMNS) AS element) ), ',') ));
SET
  table_pattern = 'predictions_%_view';
SET
  clv_dataset = CONCAT(project_id, '.{{customer_lifetime_value_dataset}}');
SET
  purchase_propensity_dataset = CONCAT(project_id, '.{{purchase_propensity_dataset}}');
SET
  audience_segmentation_dataset = CONCAT(project_id, '.{{audience_segmentation_dataset}}');
SET
  auto_audience_segmentation_dataset = CONCAT(project_id, '.{{auto_audience_segmentation_dataset}}');
CALL
  {{dataset_id}}.get_latest_table_by_pattern(clv_dataset,
    table_pattern,
    clv_table);
CALL
  {{dataset_id}}.get_latest_table_by_pattern(purchase_propensity_dataset,
    table_pattern,
    purchase_propensity_table);
CALL
  {{dataset_id}}.get_latest_table_by_pattern(audience_segmentation_dataset,
    'pred_%_view',
    audience_segmentation_table);
CALL
  {{dataset_id}}.get_latest_table_by_pattern(auto_audience_segmentation_dataset,
    'predictions_%',
    auto_audience_segmentation_table);
CALL
  {{dataset_id}}.get_columns_for_table(clv_table,
    clv_dataset,
    clv_columns);
CALL
  {{dataset_id}}.get_columns_for_table(purchase_propensity_table,
    purchase_propensity_dataset,
    purchase_propensity_columns);
CALL
  {{dataset_id}}.get_columns_for_table(audience_segmentation_table,
    audience_segmentation_dataset,
    audience_segmentation_columns);
CALL
  {{dataset_id}}.get_columns_for_table(auto_audience_segmentation_table,
    auto_audience_segmentation_dataset,
    auto_audience_segmentation_columns);
SET
  clv_special_columns = ['prediction',
  'processed_timestamp',
  'feature_date',
  'user_pseudo_id'];
SET
  purchase_propensity_special_columns = ['prediction',
  'prediction_prob',
  'processed_timestamp',
  'feature_date',
  'user_pseudo_id'];
SET
  audience_segmentation_special_columns = ['NEAREST_CENTROIDS_DISTANCE',
  'prediction',
  'processed_timestamp',
  'feature_date',
  'user_pseudo_id'];
SET
  auto_audience_segmentation_special_columns = ['user_id',
  'feature_timestamp',
  'prediction'];
SET
  clv_select_columns = array_diff(clv_columns,
    clv_special_columns);
SET
  first_join_common_columns = array_common(clv_select_columns,
    purchase_propensity_columns);
SET
  clv_select_columns = array_diff(clv_select_columns,
    first_join_common_columns);
SET
  purchase_propensity_select_columns = array_diff(purchase_propensity_columns,
    purchase_propensity_special_columns);
SET
  purchase_propensity_select_columns = array_diff(purchase_propensity_select_columns,
    first_join_common_columns);
SET
  first_join_common_selections = create_common_columns_select(first_join_common_columns,
    'a',
    'b');
SET
  clv_selections = create_columns_select(clv_select_columns,
    'a');
SET
  purchase_selections = create_columns_select(purchase_propensity_select_columns,
    'b');
SET
  first_query_str = FORMAT("""
CREATE TEMPORARY TABLE temp1 AS
SELECT
a.prediction AS ltv,
a.user_pseudo_id,
a.processed_timestamp AS ltv_processed_timestamp,
a.feature_date AS ltv_feature_date,
NTILE(10) OVER (ORDER BY a.prediction DESC) AS ltv_decile,
b.prediction AS likely_to_purchase,
b.prediction_prob AS propensity_score,
b.processed_timestamp AS propensity_processed_timestamp,
b.feature_date AS propensity_feature_date,
NTILE(10) OVER (ORDER BY b.prediction_prob DESC) AS p_p_decile,
%s,
%s,
%s
FROM
  `%s` AS a
full outer join `%s` AS b
on a.user_pseudo_id=b.user_pseudo_id;
""", first_join_common_selections, clv_selections, purchase_selections, clv_table, purchase_propensity_table);
EXECUTE IMMEDIATE
  first_query_str;
SET
  first_join_columns = ARRAY_CONCAT(['ltv', 'user_pseudo_id', 'ltv_processed_timestamp', 'ltv_feature_date', 'ltv_decile', 'likely_to_purchase', 'propensity_score', 'propensity_processed_timestamp', 'propensity_feature_date', 'p_p_decile'], first_join_common_columns, clv_select_columns, purchase_propensity_select_columns);
SET
  audience_segmentation_select_columns = array_diff(audience_segmentation_columns,
    audience_segmentation_special_columns);
SET
  second_join_common_columns = array_common(first_join_columns,
    audience_segmentation_select_columns);
SET
  first_join_select_columns = array_diff(first_join_columns,
    second_join_common_columns);
SET
  audience_segmentation_select_columns = array_diff(audience_segmentation_select_columns,
    second_join_common_columns);
SET
  second_join_common_selections = create_common_columns_select(second_join_common_columns,
    'c',
    'd');
SET
  first_join_selections = create_columns_select(first_join_select_columns,
    'c');
SET
  audience_segmentation_selections = create_columns_select(audience_segmentation_select_columns,
    'd');
SET
  seccond_query_str = FORMAT("""
CREATE OR REPLACE TEMPORARY TABLE temp2 AS
SELECT
%s,
%s,
d.NEAREST_CENTROIDS_DISTANCE[OFFSET(0)].CENTROID_ID AS Segment_ID,
d.NEAREST_CENTROIDS_DISTANCE[OFFSET(0)].DISTANCE AS Segment_Distance,
d.processed_timestamp as segment_processed_timestamp,
d.feature_date as segment_feature_date,
%s
FROM
  temp1 AS c
full outer join `%s` AS d
on c.user_pseudo_id=d.user_pseudo_id;
""", first_join_selections, second_join_common_selections, audience_segmentation_selections, audience_segmentation_table);
EXECUTE IMMEDIATE
  seccond_query_str;
SET
  second_join_columns = ARRAY_CONCAT(first_join_select_columns, second_join_common_columns, ['Segment_ID', 'Segment_Distance', 'segment_processed_timestamp', 'segment_feature_date'], audience_segmentation_select_columns);
SET
  auto_audience_segmentation_select_columns = array_diff(auto_audience_segmentation_columns,
    auto_audience_segmentation_special_columns);
SET
  third_join_common_columns = array_common(second_join_columns,
    auto_audience_segmentation_select_columns);
SET
  second_join_select_columns = array_diff(second_join_columns,
    third_join_common_columns);
SET
  auto_audience_segmentation_select_columns = array_diff(auto_audience_segmentation_select_columns,
    third_join_common_columns);
SET
  third_join_common_selections = create_common_columns_select(third_join_common_columns,
    'e',
    'f');
SET
  second_join_selections = create_columns_select(second_join_select_columns,
    'e');
SET
  auto_audience_segmentation_selections = create_columns_select(auto_audience_segmentation_select_columns,
    'f');
SET
  third_query_str = FORMAT("""
CREATE OR REPLACE TABLE `%s.{{dataset_id}}.{{table_id}}` AS
SELECT
%s,
f.feature_timestamp AS auto_segment_processed_timestamp,
f.prediction AS Auto_Segment_ID,
%s
FROM temp2 AS e
full outer join `%s` AS f
ON e.user_pseudo_id=f.user_id;
""", project_id, second_join_selections, auto_audience_segmentation_selections, auto_audience_segmentation_table);
EXECUTE IMMEDIATE
  third_query_str;