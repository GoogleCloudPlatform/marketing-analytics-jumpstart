-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- Run these windows aggregations every day. For each date in training and inference date ranges.
-- Setting procedure to lookback from the day before `input_date` until the day before `end_date`
SET input_date = DATE_SUB(input_date, INTERVAL 1 DAY);
SET end_date = DATE_SUB(end_date, INTERVAL 1 DAY);

-- Future User metrics: 1-day future logins per user
CREATE OR REPLACE TEMP TABLE future_logins_per_user AS (
  SELECT
    -- User's unique identifier
    user_pseudo_id,
    -- The date for which future logins are being calculated
    input_date as event_date,
    -- Calculates the maximum count of distinct events for users who made a logins 1 day after `input_date`
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 1 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id) AS login_day_1
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
    ON E.device_type_id = D.device_type_id
  -- Filters events to be within the date range defined by input_date and end_date from dates_interval
  WHERE event_date BETWEEN input_date AND end_date
    -- Filter event with event name login
    AND LOWER(E.event_name) IN ('login')
    AND E.ga_session_id IS NOT NULL
    AND D.device_os IS NOT NULL
  -- Grouping by user pseudo ids
  GROUP BY user_pseudo_id
);

-- All users in the platform
CREATE OR REPLACE TEMP TABLE all_users_possible_logins as (
  SELECT DISTINCT
    -- User's unique identifier
    Users.user_pseudo_id,
    -- The event date for which logins are being considered
    Days.event_date as event_date,
    -- Placeholder columns for login counts in future days
    NULL as login_day_1
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users
  CROSS JOIN 
  -- Generates a list of dates for the current date (`input_date`)
  (SELECT event_date FROM UNNEST(GENERATE_DATE_ARRAY(input_date, end_date, INTERVAL 1 DAY)) AS event_date) Days
  WHERE Days.event_date = input_date
    -- Filter event with event name login
    -- AND Users.event_name='login'
    AND Users.ga_session_id IS NOT NULL
);


CREATE OR REPLACE TEMP TABLE DataForTargetTable AS
SELECT DISTINCT
  -- Timestamp when the data was processed
  CURRENT_TIMESTAMP() AS processed_timestamp,
  -- The date for which logins are being considered
  A.event_date as feature_date,
  -- User's unique identifier
  A.user_pseudo_id,
  -- The maximum of 0 and the login count for day 1 (if it exists)
  LEAST(COALESCE(B.login_day_1, 0), 1) AS login_day_1
FROM all_users_possible_logins AS A
LEFT JOIN future_logins_per_user AS B
ON B.user_pseudo_id = A.user_pseudo_id
;

-- Updates or inserts data into the target table
MERGE `{{project_id}}.{{dataset}}.{{insert_table}}` I
USING DataForTargetTable T
ON I.feature_date = T.feature_date 
  AND I.user_pseudo_id = T.user_pseudo_id
WHEN MATCHED THEN
  -- Updates existing records
  UPDATE SET 
    -- Updates the processed timestamp
    I.processed_timestamp = T.processed_timestamp,
    -- Updates login counts for each day
    I.login_day_1 = T.login_day_1
WHEN NOT MATCHED THEN
  -- Inserts new records
  INSERT 
    (processed_timestamp,
     feature_date,
     user_pseudo_id,
     login_day_1)
  VALUES
    (T.processed_timestamp,
     T.feature_date,
     T.user_pseudo_id,
     T.login_day_1)
;

SET rows_added = (SELECT COUNT(DISTINCT user_pseudo_id) FROM `{{project_id}}.{{dataset}}.{{insert_table}}`);
