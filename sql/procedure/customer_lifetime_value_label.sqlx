-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

# Run these windows aggregations every day. For each date in training and inference date ranges.
## Setting procedure to lookback from the day before `input_date` until the day before `end_date`
SET input_date = DATE_SUB(input_date, INTERVAL 1 DAY);
SET end_date = DATE_SUB(end_date, INTERVAL 1 DAY);

## Future User metrics: 1-7-day future purchases per user, 1-15-day future purchases per user, 1-30-day future purchases per user, 1â€“90-day future purchases per user
CREATE TEMP TABLE future_revenue_per_user AS (
  SELECT DISTINCT
    user_pseudo_id,
    MAX(GREATEST(
      SUM(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 0 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
      MAX(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 0 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
            )) 
          OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_today,
    MAX(GREATEST(
      SUM(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 30 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
      MAX(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 30 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
            )) 
          OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_1_30,
    MAX(GREATEST(
      SUM(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 90 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
      MAX(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 90 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
            )) 
          OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_1_90,
    MAX(GREATEST(
      SUM(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 180 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
      MAX(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 180 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
            )) 
          OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_1_180
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON E.device_type_id = D.device_type_id
  WHERE event_date BETWEEN input_date AND end_date
  AND E.ga_session_id IS NOT NULL
  AND ecommerce.transaction_id IS NOT NULL 
  AND ecommerce.transaction_id <> '(not set)'
  AND D.device_os IS NOT NULL
  GROUP BY user_pseudo_id
);

## All users in the platform
CREATE TEMP TABLE events_users_days as (
  SELECT DISTINCT
  Users.user_pseudo_id
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users 
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON Users.device_type_id = D.device_type_id
  WHERE Users.ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
  AND Users.event_date BETWEEN input_date AND end_date
);

CREATE TEMP TABLE DataForTargetTable AS
  SELECT DISTINCT
    CURRENT_TIMESTAMP() AS processed_timestamp,
    input_date as feature_date,
    A.user_pseudo_id,
    GREATEST(0.0, COALESCE(COALESCE(B.user_ltv_revenue_1_30,0.0) - COALESCE(B.user_ltv_revenue_today,0.0), 0.0)) AS pltv_revenue_30_days,
    GREATEST(0.0, COALESCE(COALESCE(B.user_ltv_revenue_1_90,0.0) - COALESCE(B.user_ltv_revenue_today,0.0), 0.0)) AS pltv_revenue_90_days,
    GREATEST(0.0, COALESCE(COALESCE(B.user_ltv_revenue_1_180,0.0) - COALESCE(B.user_ltv_revenue_today,0.0), 0.0)) AS pltv_revenue_180_days,
    FROM events_users_days AS A
    LEFT JOIN future_revenue_per_user AS B
    ON A.user_pseudo_id = B.user_pseudo_id;

--INSERT INTO `{{project_id}}.{{dataset}}.{{insert_table}}`
--  SELECT DISTINCT * FROM DataForTargetTable;

MERGE `{{project_id}}.{{dataset}}.{{insert_table}}` I
USING DataForTargetTable T
ON I.feature_date = T.feature_date
  AND I.user_pseudo_id = T.user_pseudo_id
WHEN MATCHED THEN
  UPDATE SET 
    I.processed_timestamp = T.processed_timestamp,
    I.pltv_revenue_30_days = T.pltv_revenue_30_days,
    I.pltv_revenue_90_days = T.pltv_revenue_90_days,
    I.pltv_revenue_180_days = T.pltv_revenue_180_days
WHEN NOT MATCHED THEN
  INSERT 
    (processed_timestamp,
     feature_date,
     user_pseudo_id,
     pltv_revenue_30_days,
     pltv_revenue_90_days,
     pltv_revenue_180_days)
  VALUES
    (T.processed_timestamp,
     T.feature_date,
     T.user_pseudo_id,
     T.pltv_revenue_30_days,
     T.pltv_revenue_90_days,
     T.pltv_revenue_180_days)
;

SET rows_added = (SELECT COUNT(DISTINCT user_pseudo_id) FROM `{{project_id}}.{{dataset}}.{{insert_table}}`);

DROP TABLE future_revenue_per_user;
DROP TABLE events_users_days;
DROP TABLE DataForTargetTable;