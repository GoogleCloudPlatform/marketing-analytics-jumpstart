-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- Declares a variable to store the maximum date for analysis
DECLARE max_date DATE;
-- Declares a variable to store the minimum date for analysis
DECLARE min_date DATE;
-- Sets the max_date variable to the latest event_date minus a specified number of days ({{interval_max_date}}) from the 'event' table
SET max_date = (SELECT DATE_SUB(MAX(event_date), INTERVAL {{interval_max_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 
-- Sets the min_date variable to the earliest event_date plus a specified number of days ({{interval_min_date}}) from the 'event' table
SET min_date = (SELECT DATE_ADD(MIN(event_date), INTERVAL {{interval_min_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 

-- If min_date > maximum event_date OR max_date < minimum event_date, then set min_date for the max event_date and set max_date for the min event_date
IF min_date >= (SELECT MAX(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`) OR max_date <= (SELECT MIN(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`) THEN
  SET min_date = (SELECT MIN(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`);
  SET max_date = (SELECT MAX(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`);
END IF;

-- Creates a temporary table called dates_interval to store distinct event dates and their corresponding end dates
CREATE OR REPLACE TEMP TABLE dates_interval as (
  SELECT DISTINCT 
    -- Selects the distinct event_date and assigns it to the column input_date
    event_date as input_date,
    -- Calculates the end date by adding a specified number of days ({{interval_end_date}}) to the input_date
    DATE_ADD(event_date, INTERVAL {{interval_end_date}} DAY) as end_date
  FROM `{{mds_project_id}}.{{mds_dataset}}.event`
  -- Filters the events to include only those within the defined date range (between min_date and max_date)
  WHERE event_date BETWEEN min_date AND max_date
    ORDER BY input_date DESC
);

-- All users in the platform
-- Creates a temporary table called all_users_possible_purchases to store user purchase data
CREATE OR REPLACE TEMP TABLE all_users_possible_purchases as (
    SELECT DISTINCT
      -- Selects the user_pseudo_id from the 'event' table and assigns it to the column user_pseudo_id
      Users.user_pseudo_id,
      -- Selects the event_date from the date array generated using GENERATE_DATE_ARRAY and assigns it to the column feature_date
      DI.event_date as feature_date,
      -- Creates a series of columns (purchase_day_1 to purchase_day_15_30) and initializes them with NULL values
      -- These columns will be populated later with purchase data for specific days
      NULL as purchase_day_1,
      NULL as purchase_day_2,
      NULL as purchase_day_3,
      NULL as purchase_day_4,
      NULL as purchase_day_5,
      NULL as purchase_day_6,
      NULL as purchase_day_7,
      NULL as purchase_day_8,
      NULL as purchase_day_9,
      NULL as purchase_day_10,
      NULL as purchase_day_11,
      NULL as purchase_day_12,
      NULL as purchase_day_13,
      NULL as purchase_day_14,
      NULL as purchase_day_15_30
    FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users
    -- Performs a cross join with a subquery that generates a date array using GENERATE_DATE_ARRAY
    -- The date array includes dates from min_date to max_date with a 1-day interval
    CROSS JOIN (SELECT event_date FROM UNNEST(GENERATE_DATE_ARRAY(min_date, max_date, INTERVAL 1 DAY)) as event_date) as DI
    -- Filters the data to include events where event_name is 'purchase'
    WHERE Users.event_name='purchase'
      AND Users.ga_session_id IS NOT NULL
      AND Users.ecommerce.transaction_id IS NOT NULL 
      AND Users.ecommerce.transaction_id <> '(not set)'
  );

-- Creates a temporary table called future_purchases_per_user to store user purchase data in the future
-- Future User metrics: 1-7-day future purchases per user, 1-15-day future purchases per user, 1-30-day future purchases per user, 1â€“90-day future purchases per user
CREATE OR REPLACE TEMP TABLE future_purchases_per_user AS (
  SELECT
    -- Selects user_pseudo_id from the event table and assigns it to column user_pseudo_id
    user_pseudo_id,
    -- Selects input_date from the dates_interval table and assigns it to column feature_date
    input_date as feature_date,
    -- This calculation is performed over a window partitioned by user_pseudo_id and input_date
    -- Repeats the above logic for different day offsets (1 to 14) to calculate future purchase counts for different days
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 1 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_1,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 2 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_2,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 3 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_3,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 4 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_4,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 5 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_5,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 6 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_6,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 7 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_7,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 8 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_8,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 9 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_9,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 10 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_10,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 11 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_11,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 12 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_12,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 13 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_13,
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 14 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchase_day_14,
    -- Calculates the maximum count of distinct ecommerce.transaction_id for events occurring between 15 and 30 days after the input_date (in the future)
    MAX(COUNT(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 15 AND 30 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id) AS purchase_day_15_30
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON E.device_type_id = D.device_type_id
  CROSS JOIN dates_interval as DI
     -- Filters events to be within the date range defined by input_date and end_date from dates_interval
    WHERE E.event_date BETWEEN DI.input_date AND DI.end_date
    AND E.event_name='purchase'
    AND E.ga_session_id IS NOT NULL
    AND E.ecommerce.transaction_id IS NOT NULL 
    AND E.ecommerce.transaction_id <> '(not set)'
    AND D.device_os IS NOT NULL
    -- Groups the result by user_pseudo_id and feature_date
    GROUP BY user_pseudo_id, feature_date
);

-- Inserts data into the target table
INSERT INTO `{{project_id}}.{{dataset}}.{{insert_table}}`
SELECT DISTINCT
  -- Selects the current timestamp and assigns it to the column processed_timestamp
  CURRENT_TIMESTAMP() AS processed_timestamp,
  -- Selects the feature_date from the all_users_possible_purchases table and assigns it to the column feature_date
  A.feature_date,
  -- Selects the user_pseudo_id from the all_users_possible_purchases table and assigns it to the column user_pseudo_id
  A.user_pseudo_id,
  -- Uses the LEAST function to get the minimum value between the coalesced value of purchase_day_1 and 1
  -- COALESCE is used to handle null values, replacing them with 0
  -- This pattern is repeated for purchase_day_1 to purchase_day_15_30 to populate the respective columns
  LEAST(COALESCE(B.purchase_day_1, 0), 1) AS purchase_day_1,
  LEAST(COALESCE(B.purchase_day_2, 0), 1) AS purchase_day_2,
  LEAST(COALESCE(B.purchase_day_3, 0), 1) AS purchase_day_3,
  LEAST(COALESCE(B.purchase_day_4, 0), 1) AS purchase_day_4,
  LEAST(COALESCE(B.purchase_day_5, 0), 1) AS purchase_day_5,
  LEAST(COALESCE(B.purchase_day_6, 0), 1) AS purchase_day_6,
  LEAST(COALESCE(B.purchase_day_7, 0), 1) AS purchase_day_7,
  LEAST(COALESCE(B.purchase_day_8, 0), 1) AS purchase_day_8,
  LEAST(COALESCE(B.purchase_day_9, 0), 1) AS purchase_day_9,
  LEAST(COALESCE(B.purchase_day_10, 0), 1) AS purchase_day_10,
  LEAST(COALESCE(B.purchase_day_11, 0), 1) AS purchase_day_11,
  LEAST(COALESCE(B.purchase_day_12, 0), 1) AS purchase_day_12,
  LEAST(COALESCE(B.purchase_day_13, 0), 1) AS purchase_day_13,
  LEAST(COALESCE(B.purchase_day_14, 0), 1) AS purchase_day_14,
  LEAST(COALESCE(B.purchase_day_15_30, 0), 1) AS purchase_day_15_30
FROM all_users_possible_purchases AS A
-- Performs a left join with the future_purchases_per_user table (aliased as B) using user_pseudo_id and feature_date
LEFT JOIN future_purchases_per_user AS B
ON B.user_pseudo_id = A.user_pseudo_id AND B.feature_date = A.feature_date
;