-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

DECLARE min_date DATE;
SET min_date = (SELECT DATE_ADD(MIN(event_date), INTERVAL {{interval_min_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 

CREATE OR REPLACE TEMP TABLE dates_interval as (
  SELECT DISTINCT 
    event_date as input_date,
    DATE_SUB(event_date, INTERVAL {{interval_end_date}} DAY) as end_date
  FROM `{{mds_project_id}}.{{mds_dataset}}.event`
  WHERE event_date >= min_date
    ORDER BY input_date DESC
);

##All users metrics: 7-day active users, 8â€“14-day active users
CREATE OR REPLACE TEMP TABLE rolling_active_users AS (
SELECT
  user_pseudo_id,
  input_date as feature_date,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 1 AND 7 WHEN TRUE THEN event_date END)) OVER(PARTITION BY user_pseudo_id, input_date) AS active_users_past_1_7_day,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 8 AND 14 WHEN TRUE THEN event_date END)) OVER(PARTITION BY user_pseudo_id, input_date) AS active_users_past_8_14_day
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
CROSS JOIN dates_interval as DI
WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
AND engagement_time_msec > 0
GROUP BY user_pseudo_id, feature_date
);

## Past User metrics: 1-day purchase per user, 7-day purchases per user, 8-14-day purchases per user
CREATE OR REPLACE TEMP TABLE rolling_purchases_past_days AS (
SELECT
  user_pseudo_id,
  input_date as feature_date,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 1 AND 7 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchases_past_1_7_day,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 8 AND 14 WHEN TRUE THEN ecommerce.transaction_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS purchases_past_8_14_day
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
CROSS JOIN dates_interval as DI
WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
AND event_name='purchase'
AND ga_session_id IS NOT NULL
AND ecommerce.transaction_id IS NOT NULL 
AND ecommerce.transaction_id <> '(not set)'
GROUP BY user_pseudo_id, feature_date
);

## Past User metrics: 1-day visits per user, 7-day visits per user, 8-14-day visits per user
CREATE OR REPLACE TEMP TABLE rolling_visits_past_days AS (
SELECT
  user_pseudo_id,
  input_date as feature_date,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY)  BETWEEN 1 AND 7 WHEN TRUE THEN ga_session_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS visits_past_1_7_day,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY)  BETWEEN 8 AND 14 WHEN TRUE THEN ga_session_id END)) OVER(PARTITION BY user_pseudo_id, input_date) AS visits_past_8_14_day
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
CROSS JOIN dates_interval as DI
WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
AND ga_session_id IS NOT NULL
GROUP BY user_pseudo_id, feature_date
);

## Past User metrics: 1-day view_item per user, 7-day view_item per user, 8-14-day view_item per user
CREATE OR REPLACE TEMP TABLE rolling_view_item_past_days AS (
SELECT
  user_pseudo_id,
  input_date as feature_date,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 1 AND 7 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS view_items_past_1_7_day,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 8 AND 14 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS view_items_past_8_14_day
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
CROSS JOIN dates_interval as DI
WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
AND event_name='view_item'
AND ga_session_id IS NOT NULL
GROUP BY user_pseudo_id, feature_date
);

## Past User metrics: 1-day add_to_cart per user, 7-day add_to_cart per user, 8-14-day add_to_cart per user
CREATE OR REPLACE TEMP TABLE rolling_add_to_cart_past_days AS (
SELECT
  user_pseudo_id,
  input_date as feature_date,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 1 AND 7 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS add_to_carts_past_1_7_day,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 8 AND 14 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS add_to_carts_past_8_14_day
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
CROSS JOIN dates_interval as DI
WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
AND event_name='add_to_cart'
AND ga_session_id IS NOT NULL
GROUP BY user_pseudo_id, feature_date
);

## Past User metrics: 1-day checkout per user, 7-day checkout per user, 8-14-day checkout per user
CREATE OR REPLACE TEMP TABLE rolling_checkout_past_days AS (
SELECT
  user_pseudo_id,
  input_date as feature_date,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 1 AND 7 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS checkouts_past_1_7_day,
  MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 8 AND 14 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS checkouts_past_8_14_day
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
CROSS JOIN dates_interval as DI
WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
AND event_name='begin_checkout'
AND ga_session_id IS NOT NULL
GROUP BY user_pseudo_id, feature_date
);

## Past revenue metrics
CREATE OR REPLACE TEMP TABLE rolling_revenue_per_user AS (
SELECT DISTINCT
  user_pseudo_id,
  input_date as feature_date,
  MAX(GREATEST(
    SUM(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) = 0 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
    MAX(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) = 0 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
          )) 
        OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_past_0_day,
  MAX(GREATEST(
    SUM(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 1 AND 7 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
    MAX(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 1 AND 7 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
          )) 
        OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_past_1_7_day,
  MAX(GREATEST(
    SUM(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 1 AND 15 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
    MAX(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) BETWEEN 1 AND 15 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
          )) 
        OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_past_1_15_day
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
CROSS JOIN dates_interval as DI
WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
AND E.ga_session_id IS NOT NULL
AND ecommerce.transaction_id IS NOT NULL 
AND ecommerce.transaction_id <> '(not set)'
GROUP BY user_pseudo_id, feature_date
);

-- All users in the platform
CREATE OR REPLACE TEMP TABLE events_users as (
SELECT DISTINCT
  Users.user_pseudo_id,
  DI.input_date as feature_date
FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users
INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
ON Users.device_type_id = D.device_type_id 
CROSS JOIN dates_interval as DI
WHERE Users.ga_session_id IS NOT NULL
AND Users.event_date BETWEEN DI.end_date AND DI.input_date
AND D.device_os IS NOT NULL
);

INSERT INTO `{{project_id}}.{{dataset}}.{{insert_table}}`
  SELECT DISTINCT
    CURRENT_TIMESTAMP() AS processed_timestamp,
    EUD.feature_date,
    EUD.user_pseudo_id,
    COALESCE(active_users_past_1_7_day,0) AS active_users_past_1_7_day,
    COALESCE(active_users_past_8_14_day,0) AS active_users_past_8_14_day,
    COALESCE(purchases_past_1_7_day,0) AS purchases_past_1_7_day,
    COALESCE(purchases_past_8_14_day,0) AS purchases_past_8_14_day,
    COALESCE(visits_past_1_7_day,0) AS visits_past_1_7_day,
    COALESCE(visits_past_8_14_day,0) AS visits_past_8_14_day,
    COALESCE(view_items_past_1_7_day,0) AS view_items_past_1_7_day,
    COALESCE(view_items_past_8_14_day,0) AS view_items_past_8_14_day,
    COALESCE(add_to_carts_past_1_7_day,0) AS add_to_carts_past_1_7_day,
    COALESCE(add_to_carts_past_8_14_day,0) AS add_to_carts_past_8_14_day,
    COALESCE(checkouts_past_1_7_day,0) AS checkouts_past_1_7_day,
    COALESCE(checkouts_past_8_14_day,0) AS checkouts_past_8_14_day,
    GREATEST(0.0, COALESCE(COALESCE(G.user_ltv_revenue_past_1_7_day,0.0) - COALESCE(G.user_ltv_revenue_past_0_day,0.0), 0.0)) AS ltv_revenue_past_1_7_day,
    GREATEST( 0.0, COALESCE(COALESCE(G.user_ltv_revenue_past_1_15_day,0.0) - COALESCE(G.user_ltv_revenue_past_1_7_day,0.0), 0.0)) AS ltv_revenue_past_7_15_day,
    FROM events_users AS EUD
    FULL OUTER JOIN rolling_active_users AS A
    ON EUD.user_pseudo_id = A.user_pseudo_id AND EUD.feature_date = A.feature_date
    FULL OUTER JOIN rolling_purchases_past_days AS B
    ON EUD.user_pseudo_id = B.user_pseudo_id AND EUD.feature_date = B.feature_date
    FULL OUTER JOIN rolling_visits_past_days AS C
    ON EUD.user_pseudo_id = C.user_pseudo_id AND EUD.feature_date = C.feature_date
    FULL OUTER JOIN rolling_view_item_past_days AS D
    ON EUD.user_pseudo_id = D.user_pseudo_id AND EUD.feature_date = D.feature_date
    FULL OUTER JOIN rolling_add_to_cart_past_days AS E
    ON EUD.user_pseudo_id = E.user_pseudo_id AND EUD.feature_date = E.feature_date
    FULL OUTER JOIN rolling_checkout_past_days AS F
    ON EUD.user_pseudo_id = F.user_pseudo_id AND EUD.feature_date = F.feature_date
    FULL OUTER JOIN rolling_revenue_per_user AS G
    ON EUD.user_pseudo_id = G.user_pseudo_id AND EUD.feature_date = G.feature_date
    WHERE EUD.user_pseudo_id IS NOT NULL
;