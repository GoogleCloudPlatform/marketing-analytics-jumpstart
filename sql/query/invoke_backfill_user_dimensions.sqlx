-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

DECLARE max_date DATE;
DECLARE min_date DATE;
SET max_date = (SELECT DATE_SUB(MAX(event_date), INTERVAL {{interval_max_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 
SET min_date = (SELECT DATE_ADD(MIN(event_date), INTERVAL {{interval_min_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 

CREATE OR REPLACE TEMP TABLE dates_interval as (
  SELECT DISTINCT 
    event_date as input_date,
    DATE_SUB(event_date, INTERVAL {{interval_end_date}} DAY) as end_date
  FROM `{{mds_project_id}}.{{mds_dataset}}.event`
  WHERE event_date BETWEEN min_date AND max_date
    ORDER BY input_date DESC)
;

CREATE OR REPLACE TEMP TABLE user_dimensions_event_session_scoped as (
  SELECT DISTINCT
  DI.input_date as feature_date,
  user_pseudo_id,
  LAST_VALUE(user_ltv_revenue) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS user_ltv_revenue,
  LAST_VALUE(T.traffic_source_medium) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS last_traffic_source_medium,
  LAST_VALUE(T.traffic_source_name) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS last_traffic_source_name,
  LAST_VALUE(T.traffic_source) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS last_traffic_source_source,
  LAST_VALUE(CASE WHEN (TIMESTAMP_DIFF(event_timestamp, user_first_touch_timestamp, DAY) < 7) OR (user_first_touch_timestamp IS NULL) THEN 'new' ELSE 'existing' END) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS new_or_established_user,
  LAST_VALUE(L.subcontinent) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as geo_sub_continent,
  LAST_VALUE(L.country) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as geo_country,
  LAST_VALUE(L.region) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as geo_region,
  LAST_VALUE(L.city) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as geo_city,
  LAST_VALUE(L.metro) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as geo_metro,
  FIRST_VALUE(T.traffic_source_medium) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp ASC) AS first_traffic_source_medium,
  FIRST_VALUE(T.traffic_source_name) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp ASC) AS first_traffic_source_name,
  FIRST_VALUE(T.traffic_source) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp ASC) AS first_traffic_source_source,
  MAX(CASE WHEN user_id IS NOT NULL THEN TRUE ELSE FALSE END) OVER(PARTITION BY user_pseudo_id, DI.input_date  ORDER BY event_timestamp ASC) AS has_signed_in_with_user_id,
  LAST_VALUE(device_category) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_category,
  LAST_VALUE(device_mobile_brand_name) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_mobile_brand_name,
  LAST_VALUE(device_mobile_model_name) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_mobile_model_name,
  LAST_VALUE(device_os) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_os,
  LAST_VALUE(language) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS device_language,
  LAST_VALUE(device_web_browser) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_web_browser,
  LAST_VALUE(device_advertising_id) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_advertising_id
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.traffic_source` as T
  ON E.traffic_source_id = T.traffic_source_id
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON E.device_type_id = D.device_type_id
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.location` as L
  ON E.location_id = L.location_id
  CROSS JOIN dates_interval as DI
  WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
  AND ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
);

-- All users in the platform
CREATE OR REPLACE TEMP TABLE events_users as (
  SELECT DISTINCT
  Users.user_pseudo_id,
  Users.user_id,
  DI.event_date as feature_date
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users
  CROSS JOIN (SELECT event_date FROM UNNEST(GENERATE_DATE_ARRAY(min_date, max_date, INTERVAL 1 DAY)) as event_date) as DI
  WHERE ga_session_id IS NOT NULL)
;


INSERT INTO `{{project_id}}.{{dataset}}.{{insert_table}}`
  SELECT DISTINCT
  CURRENT_TIMESTAMP() AS processed_timestamp,
  EU.feature_date,
  EU.user_pseudo_id,
  MAX(EU.user_id) as user_id,
  MAX(UDESS.user_ltv_revenue) as user_ltv_revenue,
  MAX(UDESS.device_category) as device_category,
  MAX(UDESS.device_mobile_brand_name) as device_mobile_brand_name,
  MAX(UDESS.device_mobile_model_name) as device_mobile_model_name,
  MAX(UDESS.device_os) as device_os,
  MAX(UDESS.device_language) as device_language,
  MAX(UDESS.device_web_browser) as device_web_browser,
  APPROX_TOP_COUNT(UDESS.geo_sub_continent, 1)[OFFSET(0)].value as geo_sub_continent,
  APPROX_TOP_COUNT(UDESS.geo_country, 1)[OFFSET(0)].value as geo_country,
  APPROX_TOP_COUNT(UDESS.geo_region, 1)[OFFSET(0)].value as geo_region,
  APPROX_TOP_COUNT(UDESS.geo_city, 1)[OFFSET(0)].value as geo_city,
  APPROX_TOP_COUNT(UDESS.geo_metro, 1)[OFFSET(0)].value as geo_metro,
  MAX(UDESS.last_traffic_source_medium) as last_traffic_source_medium,
  MAX(UDESS.last_traffic_source_name) as last_traffic_source_name,
  MAX(UDESS.last_traffic_source_source) as last_traffic_source_source,
  MAX(UDESS.first_traffic_source_medium) as first_traffic_source_medium,
  MAX(UDESS.first_traffic_source_name) as first_traffic_source_name,
  MAX(UDESS.first_traffic_source_source) as first_traffic_source_source,
  MAX(UDESS.has_signed_in_with_user_id) as has_signed_in_with_user_id
  FROM events_users EU
  INNER JOIN user_dimensions_event_session_scoped UDESS
  ON EU.user_pseudo_id = UDESS.user_pseudo_id AND EU.feature_date = UDESS.feature_date --AND EU.user_id = UDESS.user_id
  GROUP BY EU.feature_date, EU.user_pseudo_id
;