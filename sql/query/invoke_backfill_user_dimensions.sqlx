-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

DECLARE max_date DATE;
DECLARE min_date DATE;
-- Sets max_date to the latest event_date from the event table, minus an offset specified by the interval_max_date
SET max_date = (SELECT DATE_SUB(MAX(event_date), INTERVAL {{interval_max_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 
-- Sets min_date to the earliest event_date from the event table, plus an offset specified by the interval_min_date
SET min_date = (SELECT DATE_ADD(MIN(event_date), INTERVAL {{interval_min_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 

-- This section determines the date range for analysis and creates a temporary table dates_interval with distinct date intervals.
CREATE OR REPLACE TEMP TABLE dates_interval as (
  SELECT DISTINCT 
    -- Select each distinct event_date as 'input_date', representing the current date in the analysis
    event_date as input_date,
    -- Calculate the 'end_date' by subtracting a specified interval from the 'input_date'
    DATE_SUB(event_date, INTERVAL {{interval_end_date}} DAY) as end_date
  FROM `{{mds_project_id}}.{{mds_dataset}}.event`
  -- Filter event dates in the specified date range
  WHERE event_date BETWEEN min_date AND max_date
    ORDER BY input_date DESC)
;

-- Calculates and stores user dimension features scoped to the session level.
CREATE OR REPLACE TEMP TABLE user_dimensions_event_session_scoped as (
  SELECT DISTINCT
  -- Selecting the input date as the feature date
  DI.input_date as feature_date,
  -- The unique identifier for the user.
  user_pseudo_id,
  -- The last recorded lifetime value revenue for the user.
  LAST_VALUE(user_ltv_revenue) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS user_ltv_revenue,
  -- The last recorded traffic source medium for the user.
  LAST_VALUE(T.traffic_source_medium) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS last_traffic_source_medium,
  -- The last recorded traffic source name for the user.
  LAST_VALUE(T.traffic_source_name) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS last_traffic_source_name,
  -- The last recorded traffic source for the user.
  LAST_VALUE(T.traffic_source) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS last_traffic_source_source,
  -- Whether the user is new or existing based on the time difference between the event and their first touch timestamp.
  LAST_VALUE(CASE WHEN (TIMESTAMP_DIFF(event_timestamp, user_first_touch_timestamp, DAY) < 7) OR (user_first_touch_timestamp IS NULL) THEN 'new' ELSE 'existing' END) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS new_or_established_user,
  -- The last recorded subcontinent for the user.
  LAST_VALUE(L.subcontinent) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as geo_sub_continent,
  -- The last recorded country for the user.
  LAST_VALUE(L.country) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as geo_country,
  -- The last recorded region for the user.
  LAST_VALUE(L.region) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as geo_region,
  -- The last recorded city for the user.
  LAST_VALUE(L.city) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as geo_city,
  -- The last recorded metro area for the user.
  LAST_VALUE(L.metro) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as geo_metro,
  -- The first recorded traffic source medium for the user.
  FIRST_VALUE(T.traffic_source_medium) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp ASC) AS first_traffic_source_medium,
  -- The first recorded traffic source name for the user.
  FIRST_VALUE(T.traffic_source_name) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp ASC) AS first_traffic_source_name,
  -- The first recorded traffic source for the user.
  FIRST_VALUE(T.traffic_source) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp ASC) AS first_traffic_source_source,
  -- Indicates if the user has signed in with a user ID.
  MAX(CASE WHEN user_id IS NOT NULL THEN TRUE ELSE FALSE END) OVER(PARTITION BY user_pseudo_id, DI.input_date  ORDER BY event_timestamp ASC) AS has_signed_in_with_user_id,
  -- The last recorded device category for the user.
  LAST_VALUE(device_category) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_category,
  -- The last recorded mobile brand name for the user.
  LAST_VALUE(device_mobile_brand_name) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_mobile_brand_name,
  -- The last recorded mobile model name for the user.
  LAST_VALUE(device_mobile_model_name) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_mobile_model_name,
  -- The last recorded device operating system for the user.
  LAST_VALUE(device_os) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_os,
  -- The last recorded device language for the user.
  LAST_VALUE(language) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) AS device_language,
  -- The last recorded web browser for the user.
  LAST_VALUE(device_web_browser) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_web_browser,
  -- The last recorded advertising ID for the user's device.
  LAST_VALUE(device_advertising_id) OVER(PARTITION BY user_pseudo_id, DI.input_date ORDER BY event_timestamp DESC) as device_advertising_id
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.traffic_source` as T
  ON E.traffic_source_id = T.traffic_source_id
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON E.device_type_id = D.device_type_id
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.location` as L
  ON E.location_id = L.location_id
  CROSS JOIN dates_interval as DI
  -- Filters the data based on specified conditions.
  WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
  AND ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
);

-- All users in the platform
CREATE OR REPLACE TEMP TABLE events_users as (
  SELECT DISTINCT
  Users.user_pseudo_id,
  Users.user_id,
  DI.event_date as feature_date
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users
  -- Joining with a generated date array from min_date to max_date with a one-day interval
  CROSS JOIN (SELECT event_date FROM UNNEST(GENERATE_DATE_ARRAY(min_date, max_date, INTERVAL 1 DAY)) as event_date) as DI
  -- Filtering for events with a non-null Google Analytics 4 session ID
  WHERE ga_session_id IS NOT NULL)
;

-- Inserting aggregated user data into the target table.
INSERT INTO `{{project_id}}.{{dataset}}.{{insert_table}}`
  SELECT DISTINCT
  -- Timestamp of the data processing
  CURRENT_TIMESTAMP() AS processed_timestamp,
  -- Feature date for the aggregated data
  EU.feature_date,
  -- User's pseudo ID
  EU.user_pseudo_id,
  -- User's ID (if available)
  MAX(EU.user_id) as user_id,
  -- User's lifetime value revenue
  MAX(UDESS.user_ltv_revenue) as user_ltv_revenue,
  -- User's device category
  MAX(UDESS.device_category) as device_category,
  -- User's device mobile brand name
  MAX(UDESS.device_mobile_brand_name) as device_mobile_brand_name,
  -- User's device mobile model name
  MAX(UDESS.device_mobile_model_name) as device_mobile_model_name,
  -- User's device operating system
  MAX(UDESS.device_os) as device_os,
  -- User's device language
  MAX(UDESS.device_language) as device_language,
  -- User's device web browser
  MAX(UDESS.device_web_browser) as device_web_browser,
  -- User's most frequent geographical subcontinent
  APPROX_TOP_COUNT(UDESS.geo_sub_continent, 1)[OFFSET(0)].value as geo_sub_continent,
  -- User's most frequent geographical country
  APPROX_TOP_COUNT(UDESS.geo_country, 1)[OFFSET(0)].value as geo_country,
  -- User's most frequent geographical region
  APPROX_TOP_COUNT(UDESS.geo_region, 1)[OFFSET(0)].value as geo_region,
  -- User's most frequent geographical city
  APPROX_TOP_COUNT(UDESS.geo_city, 1)[OFFSET(0)].value as geo_city,
  -- User's most frequent geographical metro area
  APPROX_TOP_COUNT(UDESS.geo_metro, 1)[OFFSET(0)].value as geo_metro,
  -- User's last traffic source medium
  MAX(UDESS.last_traffic_source_medium) as last_traffic_source_medium,
  -- User's last traffic source name
  MAX(UDESS.last_traffic_source_name) as last_traffic_source_name,
  -- User's last traffic source
  MAX(UDESS.last_traffic_source_source) as last_traffic_source_source,
  -- User's first traffic source medium
  MAX(UDESS.first_traffic_source_medium) as first_traffic_source_medium,
  -- User's first traffic source name
  MAX(UDESS.first_traffic_source_name) as first_traffic_source_name,
  -- User's first traffic source
  MAX(UDESS.first_traffic_source_source) as first_traffic_source_source,
  -- Flag indicating if the user has signed in with a user ID
  MAX(UDESS.has_signed_in_with_user_id) as has_signed_in_with_user_id
  FROM events_users EU
  -- Joining with the user_dimensions_event_session_scoped table on user_pseudo_id and feature_date
  INNER JOIN user_dimensions_event_session_scoped UDESS
  ON EU.user_pseudo_id = UDESS.user_pseudo_id AND EU.feature_date = UDESS.feature_date
  GROUP BY EU.feature_date, EU.user_pseudo_id
;