-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

DECLARE max_date DATE;
DECLARE min_date DATE;
SET max_date = (SELECT DATE_SUB(MAX(event_date), INTERVAL {{interval_max_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 
SET min_date = (SELECT DATE_ADD(MIN(event_date), INTERVAL {{interval_min_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 

CREATE OR REPLACE TEMP TABLE dates_interval as (
  SELECT DISTINCT 
    event_date as input_date,
    DATE_ADD(event_date, INTERVAL {{interval_end_date}} DAY) as end_date
  FROM `{{mds_project_id}}.{{mds_dataset}}.event`
  WHERE event_date BETWEEN min_date AND max_date
    ORDER BY input_date DESC
);


## All users in the platform
CREATE OR REPLACE TEMP TABLE events_users_days as (
  SELECT DISTINCT
  Users.user_pseudo_id
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users 
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON Users.device_type_id = D.device_type_id
  WHERE Users.ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
  AND Users.event_date BETWEEN min_date AND max_date
);

## Future User metrics: today future purchases per user, 1-30-day future purchases per user, 1-90-day future purchases per user, 1â€“180-day future purchases per user
CREATE OR REPLACE TEMP TABLE future_revenue_per_user AS (
  SELECT
    user_pseudo_id,
    input_date as feature_date,
    MAX(GREATEST(
      SUM(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 0 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
      MAX(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) = 0 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
            )) 
          OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_today,
    MAX(GREATEST(
      SUM(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 30 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
      MAX(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 30 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
            )) 
          OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_1_30,
    MAX(GREATEST(
      SUM(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 90 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
      MAX(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 90 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
            )) 
          OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_1_90,
    MAX(GREATEST(
      SUM(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 180 WHEN TRUE THEN IFNULL(ecommerce.purchase_revenue_in_usd,0.0) END), 
      MAX(DISTINCT CASE DATE_DIFF(event_date, input_date, DAY) BETWEEN 1 AND 180 WHEN TRUE THEN IFNULL(user_ltv_revenue,0.0) END)
            )) 
          OVER(PARTITION BY user_pseudo_id) AS user_ltv_revenue_1_180
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON E.device_type_id = D.device_type_id
  CROSS JOIN dates_interval as DI
  WHERE E.event_date BETWEEN input_date AND end_date
  AND E.ga_session_id IS NOT NULL
  AND ecommerce.transaction_id IS NOT NULL 
  AND ecommerce.transaction_id <> '(not set)'
  AND D.device_os IS NOT NULL
  GROUP BY user_pseudo_id, feature_date
);

INSERT INTO `{{project_id}}.{{dataset}}.{{insert_table}}`
  SELECT DISTINCT
    CURRENT_TIMESTAMP() AS processed_timestamp,
    B.feature_date,
    A.user_pseudo_id,
    GREATEST(0.0, COALESCE(COALESCE(B.user_ltv_revenue_1_30,0.0) - COALESCE(B.user_ltv_revenue_today,0.0), 0.0)) AS pltv_revenue_30_days,
    GREATEST(0.0, COALESCE(COALESCE(B.user_ltv_revenue_1_90,0.0) - COALESCE(B.user_ltv_revenue_today,0.0), 0.0)) AS pltv_revenue_90_days,
    GREATEST(0.0, COALESCE(COALESCE(B.user_ltv_revenue_1_180,0.0) - COALESCE(B.user_ltv_revenue_today,0.0), 0.0)) AS pltv_revenue_180_days,
  FROM events_users_days AS A
  LEFT JOIN future_revenue_per_user AS B
  ON A.user_pseudo_id = B.user_pseudo_id
;