-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- This SQL code defines a series of temporary tables to calculate and store user engagement metrics based on
-- rolling window aggregations. These tables are then used to populate a target table with daily user engagement features.

DECLARE max_date DATE;
DECLARE min_date DATE;
-- Sets max_date to the latest event_date from the event table, minus an offset specified by the interval_max_date
SET max_date = (SELECT DATE_SUB(MAX(event_date), INTERVAL {{interval_max_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 
-- Sets min_date to the earliest event_date from the event table, plus an offset specified by the interval_min_date
SET min_date = (SELECT DATE_ADD(MIN(event_date), INTERVAL {{interval_min_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 

-- If min_date > maximum event_date OR max_date < minimum event_date, then set min_date for the max event_date and set max_date for the min event_date
IF min_date >= (SELECT MAX(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`) OR max_date <= (SELECT MIN(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`) OR min_date >= max_date THEN
  SET min_date = (SELECT MIN(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`);
  SET max_date = (SELECT MAX(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`);
END IF;

-- This code block acts as a safeguard to ensure that the min_date and max_date used for further analysis are always within the bounds of the actual data available in the table. 
-- It prevents situations where calculations might mistakenly consider dates beyond the real data range, which could lead to errors or misleading results.
IF max_date > (SELECT MAX(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`) OR min_date < (SELECT MIN(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`) THEN
  SET min_date = (SELECT MIN(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`);
  SET max_date = (SELECT MAX(event_date) FROM `{{mds_project_id}}.{{mds_dataset}}.event`);
END IF;

-- This section determines the date range for analysis and creates a temporary table dates_interval with distinct date intervals.
CREATE OR REPLACE TEMP TABLE dates_interval as (
  SELECT DISTINCT 
    -- Select each distinct event_date as 'input_date', representing the current date in the analysis
    event_date as input_date,
     -- Calculate the 'end_date' by subtracting a specified interval from the 'input_date'
    DATE_SUB(event_date, INTERVAL {{interval_end_date}} DAY) as end_date
  FROM `{{mds_project_id}}.{{mds_dataset}}.event`
  WHERE event_date BETWEEN min_date AND max_date
    ORDER BY input_date DESC
);

{% for feature in short_list_features %}
-- Run these windows aggregations every day. For each date in training and inference date ranges.
-- All users metrics: 1â€“5-day {{feature.feature_name}} users
CREATE OR REPLACE TEMP TABLE rolling_{{feature.feature_name}}_past_days AS (
  SELECT
    user_pseudo_id,
    input_date as feature_date,
    -- Number of times the user has {{feature.feature_name}} in the past 1st day
    MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) = 1 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS {{feature.feature_name}}_past_1_day,
    -- Number of times the user has {{feature.feature_name}} in the past 2nd day
    MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) = 2 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS {{feature.feature_name}}_past_2_day,
    -- Number of times the user has {{feature.feature_name}} in the past 3rd day
    MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) = 3 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS {{feature.feature_name}}_past_3_day,
    -- Number of times the user has {{feature.feature_name}} in the past 4th day
    MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) = 4 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS {{feature.feature_name}}_past_4_day,
    -- Number of times the user has {{feature.feature_name}} in the past 5th day
    MAX(COUNT(DISTINCT CASE DATE_DIFF(input_date, event_date, DAY) = 5 WHEN TRUE THEN event_timestamp END)) OVER(PARTITION BY user_pseudo_id, input_date) AS {{feature.feature_name}}_past_5_day
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
  CROSS JOIN dates_interval as DI
  -- Filter events to be within the defined date range
  WHERE E.event_date BETWEEN DI.end_date AND DI.input_date
  -- Filter for {{feature.feature_name}} events
  AND event_name='{{feature.feature_name}}'
  -- Ensure valid session ID
  AND ga_session_id IS NOT NULL
  -- Group the results by user pseudo ID and feature date
  GROUP BY user_pseudo_id, feature_date
);

{% endfor %}

-- All users in the platform
-- This code creates a temporary table that contains a distinct list of user pseudo IDs 
-- and their corresponding feature dates, filtering for events with valid session IDs, 
-- device operating systems, and falling within the specified date range.
CREATE OR REPLACE TEMP TABLE events_users as (
  SELECT DISTINCT
    Users.user_pseudo_id,
    DI.input_date as feature_date
  FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users
  INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON Users.device_type_id = D.device_type_id 
  CROSS JOIN dates_interval as DI
  WHERE Users.ga_session_id IS NOT NULL
  AND Users.event_date BETWEEN DI.end_date AND DI.input_date
  AND D.device_os IS NOT NULL
);

-- This code block inserts data into a table, combining information from the events_users 
-- table and several temporary tables containing rolling window features. The resulting data 
-- represents user-level features for each user and date, capturing their past activity within 
-- different time windows.
INSERT INTO `{{project_id}}.{{dataset}}.{{insert_table}}` (
  processed_timestamp,
  feature_date,
  user_pseudo_id{% for feature in short_list_features %},
  {{feature.feature_name}}_past_1_day,
  {{feature.feature_name}}_past_2_day,
  {{feature.feature_name}}_past_3_day,
  {{feature.feature_name}}_past_4_day,
  {{feature.feature_name}}_past_5_day{% endfor %}
)
  SELECT DISTINCT
    -- This selects the current timestamp and assigns it to the column processed_timestamp.
    CURRENT_TIMESTAMP() AS processed_timestamp,
    EUD.feature_date,
    EUD.user_pseudo_id{% for feature in short_list_features %},
    COALESCE({{feature.feature_name}}_past_1_day,0) AS {{feature.feature_name}}_past_1_day,
    COALESCE({{feature.feature_name}}_past_2_day,0) AS {{feature.feature_name}}_past_2_day,
    COALESCE({{feature.feature_name}}_past_3_day,0) AS {{feature.feature_name}}_past_3_day,
    COALESCE({{feature.feature_name}}_past_4_day,0) AS {{feature.feature_name}}_past_4_day,
    COALESCE({{feature.feature_name}}_past_5_day,0) AS {{feature.feature_name}}_past_5_day{% endfor %}
    FROM events_users AS EUD{% for feature in short_list_features %}
    FULL OUTER JOIN rolling_scroll_50_past_days AS {{feature.feature_name}}
    ON EUD.user_pseudo_id = A.user_pseudo_id{% endfor %}
    -- This filters the results to include only rows where the user_pseudo_id is not null.
    WHERE EUD.user_pseudo_id IS NOT NULL
    ; 