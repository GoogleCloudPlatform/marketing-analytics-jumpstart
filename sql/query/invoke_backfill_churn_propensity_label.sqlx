-- Copyright 2023 Google LLC
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- 

DECLARE max_date DATE;
DECLARE min_date DATE;
DECLARE CHURN_MULTIPLIER_DAYS INT64;

SET max_date = (SELECT DATE_SUB(MAX(event_date), INTERVAL {{interval_max_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 
SET min_date = (SELECT DATE_ADD(MIN(event_date), INTERVAL {{interval_min_date}} DAY) FROM `{{mds_project_id}}.{{mds_dataset}}.event`); 
SET CHURN_MULTIPLIER_DAYS = 30;

CREATE OR REPLACE TEMP TABLE dates_interval as (
SELECT DISTINCT 
  event_date as input_date,
  DATE_ADD(event_date, INTERVAL {{interval_end_date}} DAY) as end_date
FROM `{{mds_project_id}}.{{mds_dataset}}.event`
WHERE event_date BETWEEN min_date AND max_date
  ORDER BY input_date DESC
);

-- All users in the platform
CREATE OR REPLACE TEMP TABLE all_possible_users as (
SELECT DISTINCT
  Users.user_pseudo_id,
  DI.event_date as feature_date,
  NULL as churned,
  NULL as bounced,
FROM `{{mds_project_id}}.{{mds_dataset}}.event` Users
CROSS JOIN (SELECT event_date FROM UNNEST(GENERATE_DATE_ARRAY(min_date, max_date, INTERVAL 1 DAY)) as event_date) as DI
WHERE LOWER(Users.event_name) IN ('user_engagement') -- page_view, session_start, user_engagement
      AND Users.ga_session_id IS NOT NULL
  );

-- Calculating the first and last touch for each user.
CREATE OR REPLACE TEMP TABLE first_and_last_touch_per_user AS (
SELECT DISTINCT
  user_pseudo_id,
  input_date as feature_date,
  MIN(event_timestamp) AS user_first_event,
  MAX(event_timestamp) AS user_last_event
FROM `{{mds_project_id}}.{{mds_dataset}}.event` as E
INNER JOIN `{{mds_project_id}}.{{mds_dataset}}.device` as D
  ON E.device_type_id = D.device_type_id
CROSS JOIN dates_interval as DI
WHERE E.event_date BETWEEN DI.input_date AND DI.end_date
  AND LOWER(E.event_name) IN ('user_engagement') -- page_view, session_start, user_engagement
  AND E.ga_session_id IS NOT NULL
  AND D.device_os IS NOT NULL
GROUP BY 
  user_pseudo_id, feature_date
);

-- Future User metrics: 1-7-day future purchases per user, 1-15-day future purchases per user, 1-30-day future purchases per user, 1â€“90-day future purchases per user
CREATE OR REPLACE TEMP TABLE future_churn_per_user AS (
SELECT DISTINCT
  user_pseudo_id,
  feature_date,
  -- churned = 1 if last_event within X days of event, else 0
IF (user_last_event < TIMESTAMP_ADD(user_first_event, INTERVAL CHURN_MULTIPLIER_DAYS DAY), 1, 0) AS churned,
-- bounced = 1 if last_touch within 10 min, else 0
IF (user_last_event <= TIMESTAMP_ADD(user_first_event, INTERVAL 10 MINUTE), 1, 0) AS bounced,
FROM first_and_last_touch_per_user
GROUP BY
  user_pseudo_id, 
  user_first_event,
  user_last_event,
  feature_date
);

INSERT INTO `{{project_id}}.{{dataset}}.{{insert_table}}`
SELECT DISTINCT
  CURRENT_TIMESTAMP() AS processed_timestamp,
  A.feature_date,
  A.user_pseudo_id,
  LEAST(COALESCE(B.churned, 0), 1) AS churned,
  LEAST(COALESCE(B.bounced, 0), 1) AS bounced,
FROM all_possible_users AS A
LEFT JOIN future_churn_per_user AS B
ON B.user_pseudo_id = A.user_pseudo_id
    AND B.churned IS NOT NULL
    AND B.bounced IS NOT NULL
    AND B.feature_date = A.feature_date
;